<?xml version="1.0" encoding="UTF-8"?>
<step name="xslt" version-idref="v30" category-idrefs="standard-steps additional-standards" short-description="Invoke an XSLT stylesheet"
  required="true" publish="true" href-specification="{$BASELINK-STANDARD-STEPS-V30}#c.xslt" xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns:xi="http://www.w3.org/2001/XInclude" xsi:schemaLocation="http://www.xtpxlib.nl/ns/xprocref ../../../xsd/xprocref.xsd"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.xtpxlib.nl/ns/xprocref">

  <!-- ======================================================================= -->

  <signature>

    <input port="source" content-types="any" sequence="true" primary="true">
      <description>
        <para>The source document(s) to transform. What exactly happens with these documents depends on the XSLT stylesheet version. See below.</para>
      </description>
    </input>

    <input port="stylesheet" content-types="xml" primary="false" sequence="false">
      <description>
        <para>The XSLT stylesheet to invoke.</para>
      </description>
    </input>

    <output port="result" primary="true" sequence="true" content-types="any">
      <description>
        <para>The principal resulting document(s) of the transformation.</para>
      </description>
    </output>

    <output port="secondary" sequence="true" content-types="any" primary="false">
      <description>
        <para>Any secondary documents created by the transformation.</para>
        <para>Starting with XSLT version&#160;2.0, you can use the XSLT <tag>xsl:result-document</tag> instruction for this.</para>
      </description>
    </output>

    <option name="parameters" as="map(xs:QName,item()*)?" required="false">
      <description>
        <para>A map with parameter-names and corresponding values to pass as global parameters to the XSLT stylesheet.</para>
      </description>
    </option>

    <option name="static-parameters" as="map(xs:QName,item()*)?" required="false">
      <description>
        <para>A map with parameter-names and corresponding values to pass as static parameters to the XSLT stylesheet.</para>
        <para>Static stylesheet parameters are supported starting XSLT version&#160;3.0.</para>
      </description>
    </option>

    <option name="global-context-item" as="item()?" required="false">
      <description>
        <para>This explicitly sets the global context item for the XSLT stylesheet: the data the stylesheet starts working on. If you don&#x2019;t use
          this option, the global context item is determined by what appears on the <port>source</port> port.</para>
        <para>Setting the global context item is supported starting XSLT version&#160;3.0.</para>
      </description>
    </option>

    <option name="populate-default-collection" as="xs:boolean?" select="true()" required="false">
      <description>
        <para>XSLT stylesheets have a <emphasis>default collection</emphasis>, accessible using the XPath <link
            xlink:href="https://www.w3.org/TR/xpath-functions-31/#func-collection" role="newpage">collection()</link> function. If you set this option
          to <code>true</code>, the documents appearing on the <port>source</port> port become the default collection.</para>
        <para>Collections are supported starting XSLT version&#160;2.0.</para>
      </description>
    </option>

    <option name="initial-mode" as="xs:QName?" required="false">
      <description>
        <para>If this option is set, the XSLT stylesheet starts processing in the given mode.</para>
        <para>Modes are supported starting XSLT version&#160;2.0.</para>
      </description>
    </option>

    <option name="template-name" as="xs:QName?" required="false">
      <description>
        <para>Usually, an XSLT stylesheet starts processing using &#x201c;apply-template invocation&#x201d;: it tries to find the most appropriate
          matching template and starts processing there. However, if the <option>template-name</option> option is set, a &#x201c;call-template
          invocation&#x201d; is performed: processing starts at that named template.</para>
        <para/>
        <para>Starting processing at a named template is supported starting XSLT version&#160;2.0.</para>
      </description>
    </option>

    <option name="output-base-uri" as="xs:anyURI?" required="false">
      <description>
        <para>Explicitly sets the base URI for the stylesheet result(s). What exactly happens depends on the XSLT stylesheet version. See
          below.</para>
      </description>
    </option>

    <option name="version" as="xs:string?" required="false">
      <description>
        <para>Explicitly sets the XSLT stylesheet version. Probable values are <code>1.0</code>, <code>2.0</code> or <code>3.0</code>.</para>
        <para>If this option is not set, officially the XSLT version used is implementation-defined and therefore depends on the XProc processor used.
          However, most likely the XProc processor will use the stylesheet version as indicated on the stylesheet root element (the
            <code>xsl:stylesheet/@version</code> or <code>xsl:transform/@version</code> attribute).</para>
      </description>
    </option>

  </signature>

  <!-- ======================================================================= -->

  <summary>
    <para>The <step/> step invokes the XSLT stylesheet that appears on the <port>stylesheet</port> port. What exactly happens depends on the XSLT
      version used.</para>
  </summary>

  <!-- ======================================================================= -->

  <description>

    <para>The <step/> step invokes the XSLT stylesheet that appears on the <port>stylesheet</port> port. What is used as input, how the XSLT
      processing starts and where/how the results appear depends on the XSLT version used. This is explained in the sections below.</para>

    <para>Because of all the details, invoking the <step/> step seems complicated. However, presumably, in the vast majority of cases it will be used
      in a classical manner: invoke an XSLT stylesheet on a source document and continue the pipeline using its result. Maybe with some parameters,
      maybe with some secondary results. For this, have a look at the <example-ref idref="basic-usage"/> and <example-ref idref="basic-usage-2"/>
      examples and don&#x2019;t let all the details overwhelm you.</para>

    <para>Specifying the XSLT version is important but, in most cases, rather simple: most likely the version as specified on the XSLT stylesheet root
      element (the <code>xsl:stylesheet/@version</code> or <code>xsl:transform/@version</code> attribute) is used. Since such a version attribute is
      required anyway, there usually won&#x2019;t be anything special you need to do. However, if you want you can set the version explicitly using
      the <option>version</option> option.</para>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

    <section>
      <title>Invoking an XSLT&#160;3.0 stylesheet</title>

      <para>If the stylesheet version is determined as 3.0, the following happens:</para>
      <itemizedlist>

        <listitem>
          <para>The parameters as set by the <option>static-parameters</option> option are passed to the stylesheet invocation as values for its
            static parameters.</para>
        </listitem>

        <listitem>
          <para>An XSLT version&#160;3.0 stylesheet has a <emphasis>global context item</emphasis>, the data the stylesheet works upon. This is
            determined as follows:</para>
          <itemizedlist>
            <listitem>
              <para>If the <option>global-context-item</option> option is set, this becomes the global context item.</para>
            </listitem>
            <listitem>
              <para>If the <option>global-context-item</option> option is <emphasis>not</emphasis> set <emphasis>and</emphasis> a single document
                appears on the <port>source</port> port, this will become the global context item.</para>
            </listitem>
            <listitem>
              <para>If the <option>global-context-item</option> option is <emphasis>not</emphasis> set <emphasis>and</emphasis> none or multiple
                documents appear on the <port>source</port> port, the global context item is absent/empty.</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>If the <option>populate-default-collection</option> is set to <code>true</code>, all documents that appear on the <port>source</port>
            port become the <emphasis>default collection</emphasis>, accessible using the XPath <link
              xlink:href="https://www.w3.org/TR/xpath-functions-31/#func-collection" role="newpage">collection()</link> function.</para>
        </listitem>

        <listitem>
          <para>Then it is determined how to start the stylesheet processing:</para>
          <itemizedlist>
            <listitem>
              <para>If the <option>template-name</option> is <emphasis>not</emphasis> set, the normal &#x201c;apply-template invocation&#x201d; is
                performed. The document(s) that appear on the <port>source</port> port are used, one by one, for the initial match.</para>
              <para>If the <option>initial-mode</option> option is set, processing starts in that mode.</para>
            </listitem>
            <listitem>
              <para>If the <option>template-name</option> is set, the named template with that name (<tag>xsl:template name="â€¦"</tag>) is
                invoked.</para>
              <para>The <option>initial-mode</option> option is ignored.</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>The stylesheet processes.</para>
        </listitem>

        <listitem>
          <para>The result(s) appears on the output port(s):</para>
          <itemizedlist>
            <listitem>
              <para>All principal results of the stylesheet appear on the <port>result</port> port.</para>
            </listitem>
            <listitem>
              <para>Any results created by <tag>xsl:result-document</tag> instructions appear on the <port>secondary</port> port. </para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>Finally, the base URIs of the resulting documents (their <property>base-uri</property> document-property values) are determined. For
            this we first need to determine the <emphasis>base-output-URI</emphasis>:</para>
          <itemizedlist>
            <listitem>
              <para>If the <option>base-output-uri</option> option is set, this value is used as base-output-URI.</para>
            </listitem>
            <listitem>
              <para>If the <option>base-output-uri</option> option is <emphasis>not</emphasis> set <emphasis>and</emphasis> there are documents on the
                  <port>source</port> port, the base URI of the <emphasis>first</emphasis> document on the <port>source</port> port is used as base
                output URI.</para>
            </listitem>
            <listitem>
              <para>If the <option>base-output-uri</option> option is <emphasis>not</emphasis> set <emphasis>and</emphasis> there are
                  <emphasis>no</emphasis> documents on the <port>source</port> port, the base URI of the stylesheet is used as base-output-URI.</para>
            </listitem>
          </itemizedlist>
          <para>The base URIs of the resulting documents (their <property>base-uri</property> document-property values) are now computed using this
            base-output-URI:</para>
          <itemizedlist>
            <listitem>
              <para>The base URI of the principal output document(s) becomes the base-output-URI. This means that when there are multiple principal
                documents, they all have the same base URI!</para>
            </listitem>
            <listitem>
              <para>For all documents appearing on the <port>secondary</port> port, the base URI is determined by the
                  <code>xsl:result-document/@href</code> attribute. A relative value is made absolute against the base-output-URI.</para>
            </listitem>
          </itemizedlist>
        </listitem>

      </itemizedlist>

    </section>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

    <section>
      <title>Invoking an XSLT&#160;2.0 stylesheet</title>

      <para>If the stylesheet version is determined as 3.0, the following happens:</para>
      <itemizedlist>

        <listitem>
          <para>The following options are ignored: <option>static-parameters</option>, <option>global-context-item</option>.</para>
        </listitem>

        <listitem>
          <para>An XSLT version&#160;2.0 stylesheet has an <emphasis>initial context node</emphasis>, the initial data the stylesheet works upon. This
            is determined as follows:</para>
          <itemizedlist>
            <listitem>
              <para>When no documents appear on the <port>source</port> port, the initial context node is undefined/empty.</para>
            </listitem>
            <listitem>
              <para>When one or multiple documents appear on the <port>source</port> port, only the <emphasis>first</emphasis> document becomes the
                initial context node.</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>If the <option>populate-default-collection</option> is set to <code>true</code>, all documents that appear on the <port>source</port>
            port become the <emphasis>default collection</emphasis>, accessible using the XPath <link
              xlink:href="https://www.w3.org/TR/xpath-functions-31/#func-collection" role="newpage">collection()</link> function.</para>
        </listitem>

        <listitem>
          <para>Then it is determined how to start the stylesheet processing:</para>
          <itemizedlist>
            <listitem>
              <para>If the <option>template-name</option> is <emphasis>not</emphasis> set, the normal &#x201c;apply-template invocation&#x201d; is
                performed. The document(s) that appear on the <port>source</port> port are used, one by one, for the initial match.</para>
              <para>If the <option>initial-mode</option> option is set, processing starts in that mode.</para>
            </listitem>
            <listitem>
              <para>If the <option>template-name</option> is set, the named template with that name (<tag>xsl:template name="â€¦"</tag>) is
                invoked.</para>
              <para>The <option>initial-mode</option> option is ignored.</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>The stylesheet processes.</para>
        </listitem>

        <listitem>
          <para>The result(s) appears on the output port(s):</para>
          <itemizedlist>
            <listitem>
              <para>The principal result document of the stylesheet appears on the <port>result</port> port.</para>
            </listitem>
            <listitem>
              <para>Any results created by <tag>xsl:result-document</tag> instructions appear on the <port>secondary</port> port. </para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>Finally, the base URIs of the resulting documents (their <property>base-uri</property> document-property values) are determined. For
            this we first need to determine the <emphasis>base-output-URI</emphasis>:</para>
          <itemizedlist>
            <listitem>
              <para>If the <option>base-output-uri</option> option is set, this value is used as base-output-URI.</para>
            </listitem>
            <listitem>
              <para>If the <option>base-output-uri</option> option is <emphasis>not</emphasis> set <emphasis>and</emphasis> there are documents on the
                  <port>source</port> port, the base URI of the <emphasis>first</emphasis> document on the <port>source</port> port is used as base
                output URI.</para>
            </listitem>
            <listitem>
              <para>If the <option>base-output-uri</option> option is <emphasis>not</emphasis> set <emphasis>and</emphasis> there are
                  <emphasis>no</emphasis> documents on the <port>source</port> port, the base URI of the stylesheet is used as base-output-URI.</para>
            </listitem>
          </itemizedlist>
          <para>The base URIs of the resulting documents (their <property>base-uri</property> document-property values) are now computed using this
            base-output-URI:</para>
          <itemizedlist>
            <listitem>
              <para>The base URI of the principal output document becomes the base-output-URI.</para>
            </listitem>
            <listitem>
              <para>For all documents appearing on the <port>secondary</port> port, the base URI is determined by the
                  <code>xsl:result-document/@href</code> attribute. A relative value is made absolute against the base-output-URI.</para>
            </listitem>
          </itemizedlist>
        </listitem>

      </itemizedlist>

    </section>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

    <section>
      <title>Invoking an XSLT&#160;1.0 stylesheet</title>

      <para>If the stylesheet version is determined as 1.0, the following happens:</para>
      <itemizedlist>

        <listitem>
          <para>The following options are ignored: <option>global-context-item</option>, <option>initial-mode</option>,
              <option>populate-default-collection</option>, <option>static-parameters</option>, <option>template-name</option>.</para>
        </listitem>

        <listitem>
          <para>There must be exactly one document appearing on the <port>source</port> port. This document will be processed.</para>
        </listitem>

        <listitem>
          <para>The stylesheet processes.</para>
        </listitem>

        <listitem>
          <para>The resulting document appears on the <port>result</port> port. The <port>secondary</port> port will always be empty.</para>
        </listitem>

        <listitem>
          <para>Finally, the base URI of the resulting document (its <property>base-uri</property> document-property value) is determined. For this we
            first need to determine the <emphasis>base-output-URI</emphasis>:</para>
          <itemizedlist>
            <listitem>
              <para>If the <option>base-output-uri</option> option is set, this value is used as base-output-URI.</para>
            </listitem>
            <listitem>
              <para>If the <option>base-output-uri</option> option is <emphasis>not</emphasis> set, the base URI of the <emphasis>first</emphasis>
                document on the <port>source</port> port is used as base-output-URI.</para>
            </listitem>
          </itemizedlist>
          <para>The base URI of the output document becomes the base-output-URI.</para>
        </listitem>

      </itemizedlist>

    </section>

  </description>

  <!-- ======================================================================= -->

  <detail>
    <para>Which XSLT version(s) is/are supported is implementation-defined and therefore depends on the XProc processor used. In most cases at least
      version 3.0 will be supported.</para>
  </detail>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <detail>
    <para>No document-properties from the source document(s) are preserved.</para>
  </detail>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <detail>
    <para>The <property>base-uri</property> document of each result document (both for the <port>result</port> and the <port>secondary</port> port is
      determined by the transformation. If the transformation does not establish a base URI, the document will not have a
        <property>base-uri</property> document-property.</para>
  </detail>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <detail>
    <para>If the <option>template-name</option> option is set, the <option>initial-mode</option> option is ignored.</para>
  </detail>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <detail>
    <para>A relative value for the <option>output-base-uri</option> option is made absolute against the base URI of the element in the pipeline it is
      specified on. In most cases this will be the path of the pipeline document.</para>
  </detail>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <detail>
    <para>An XSLT stylesheet can terminate processing using an <tag>xsl:message terminate="true"</tag> instruction. How such a termination is reported
      by the XProc processor is implementation-defined and therefore depends on the XProc processor used.</para>
  </detail>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <detail>
    <para>The order in which result documents appear on the <port>secondary</port> port is implementation-defined and therefore depends on the XProc
      processor used.</para>
  </detail>

  <!-- ======================================================================= -->

  <example title="Basic usage" id="basic-usage">

    <para>For the following example, we&#x2019;ll use a very simple (3.0) stylesheet, called <code>add-comment.xsl</code>, that adds a comment as the
      first child of the root element:</para>

    <example-doc href="../../examples/xslt/add-comment.xsl"/>

    <para>Running this without any bells and whistles is as follows:</para>

    <xproc-example href="../../examples/xslt/xslt-01.xpl"/>

    <xproc-example href="../../examples/xslt/xslt-02.xpl" show-source="false">
      <pipeline-header>
        <para>Setting a stylesheet parameter is done by supplying a map with parameter name/value pairs as the value of the
            <option>parameters</option> option:</para>
      </pipeline-header>
    </xproc-example>

  </example>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <example title="Basic usage with secondary documents" id="basic-usage-2">

    <para>The output of <tag>xsl:result-document</tag> stylesheet instructions is written to the <port>secondary</port> port of the <step/>
      invocation. The base URI of these documents is the value of the <code>xsl:result-document/@href</code> attribute.</para>

    <para>The following stylesheet, called <code>split-documents.xsl</code>, writes the contents of each <tag>document</tag> element to a separate,
      secondary, document. The base URI of the output documents is inferred from the <code>document/@name</code> attribute. The primary output of the
      stylesheet is almost identical to its input: the full URI of each written secondary output document is added to the <tag>document</tag> element
      in an <code>href</code> attribute.</para>

    <example-doc href="../../examples/xslt/split-documents.xsl"/>

    <para>When using this stylesheet in an XProc pipeline, the documents, written by <tag>xsl:result-document</tag> instructions, end up on the
        <port>secondary</port> port. If we want these written to disk, we need to add some code for it.</para>

    <xproc-example href="../../examples/xslt/xslt-03.xpl" keep-from="tmp/"/>

   <para>The primary output of the <step/> is explicitly piped to the output port of the pipeline here (by the <code>p:output/@pipe</code> attribute).</para>
    <para>The <code>p:for-each</code> after the <step/> iterates over all secondary documents and invokes <step-ref name="p:store"/> to store them to
      disk, using their base URI, that was set by the stylesheet. The result will be two documents, called <code>x1.xml</code> and
      <code>x2.xml</code>, in the <code>tmp/</code> folder underneath the stylesheet location.</para>

  </example>

  <!-- ======================================================================= -->


  <step-errors>
    <step-error code="XC0038"/>
    <step-error code="XC0093"/>
    <step-error code="XC0095"/>
    <step-error code="XC0096"/>
    <step-error code="XC0008"/>
    <step-error code="XC0056"/>
    <step-error code="XC0121"/>
    <step-error code="XC0094"/>
    <step-error code="XC0007"/>
    <step-error code="XC0039"/>
    <step-error code="XC0105"/>
  </step-errors>

</step>
