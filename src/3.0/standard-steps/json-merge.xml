<?xml version="1.0" encoding="UTF-8"?>
<step name="json-merge" version-idref="v30" category-idrefs="standard-steps json" short-description="Joins documents into a JSON map document"
  required="true" publish="true" href-specification="{$BASELINK-STANDARD-STEPS-V30}#c.json-merge"
  xsi:schemaLocation="http://www.xtpxlib.nl/ns/xprocref ../../../xsd/xprocref.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns="http://www.xtpxlib.nl/ns/xprocref">

  <!-- ======================================================================= -->

  <signature>
    <input port="source" sequence="true" content-types="any" primary="true">
      <description>
        <para>The documents to join.</para>
      </description>
    </input>

    <output port="result" content-types="application/json" primary="true" sequence="false">
      <description>
        <para>The resulting JSON map document containing the source documents.</para>
      </description>
    </output>

    <option name="duplicates" values="('reject', 'use-first', 'use-last', 'use-any', 'combine')" select="'use-first'" required="false" as="item()*">
      <description>
        <para>Specifies what to do with duplicate keys in the resulting map. See <xref linkend="duplicates"/>.</para>
      </description>
    </option>

    <option name="key" as="xs:string" select="'concat(&#34;_&#34;,$p:index)'" subtype="XPathExpression" required="false">
      <description>
        <para>An XPath expression that computes the value for the key of an entry in the resulting map.</para>
        <para>This expression is evaluated with the document it is applied to as context item. A variable <code>$p:index</code> is available that
          holds the index (sequence number) of the document on the <port>source</port> port.</para>
        <para>See <example-ref idref="diffkey"/> for an example of how to use this option.</para>
      </description>
    </option>

  </signature>

  <!-- ======================================================================= -->
  <summary>
    <para>The <step/> step merges the document(s) appearing on the <port>source</port> port into a JSON map. This map is returned as a single JSON
      document on the <port>result</port> port.</para>
  </summary>

  <!-- ======================================================================= -->

  <description>

    <para>The <step/> step takes the document(s) appearing on its <port>source</port> port and joins them into a JSON map (also know as JSON object).
      How the source documents end up in the resulting map depends on their type:</para>
    <itemizedlist>
      <listitem>
        <para>For a JSON source document that is a map, all key/value pairs are copied into the result map.</para>
      </listitem>
      <listitem>
        <para>For JSON documents that are not a map, XML, HTML and text documents, a new key/value pair is created. The key is computed using the
          XPath expression in the <option>key</option> option. Regarding their value:</para>
        <itemizedlist>
          <listitem>
            <para>A JSON document is used as is.</para>
          </listitem>
          <listitem>
            <para>An XML, HTML or text document is first serialized (as if written to disk) and then added as a string to the resulting array.</para>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para>Whether <step/> can handle any other media types is implementation-defined and therefore depends on the XProc processor used.</para>
      </listitem>
    </itemizedlist>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

    <section xml:id="duplicates">
      <title>Handling duplicates</title>

      <para>While filling up the result map, it can happen that a key is already present. Duplicate keys are not allowed. What happens in case of a
        duplicate key depends on the value of the <option>duplicates</option> option:</para>

      <table role="nonumber">
        <title/>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>
                <para>Value</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <code>
                    <code>reject</code>
                  </code>
                </para>
              </entry>
              <entry>
                <para>When a duplicate key is detected, error <step-error-ref code="XC0106"/> is raised</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <code>use-first</code> (default) </para>
              </entry>
              <entry>
                <para>When a duplicate key is detected, the already present entry is used and the duplicate one is discarded.</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <code>use-last</code>
                </para>
              </entry>
              <entry>
                <para>When a duplicate key is detected, the already present entry is discarded and the duplicate one is used.</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <code>use-any</code>
                </para>
              </entry>
              <entry>
                <para>When a duplicate key is detected, it is implementation-defined which one is retained.</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <code>combine</code>
                </para>
              </entry>
              <entry>
                <para>When a duplicate key is detected, the values for both keys are concatenated.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>See <example-ref idref="duplicates"/> for an example.</para>

    </section>

  </description>

  <!-- ======================================================================= -->

  <detail>
    <para>No document-properties of the source document(s) survive.</para>
  </detail>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <detail>
    <para>The resulting document has no <property>base-uri</property> property.</para>
  </detail>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <detail>
    <para>If there are no documents appearing on the <port>source</port> port, the <port>result</port> port returns the empty sequence.</para>
  </detail>

  <!-- ======================================================================= -->

  <example title="Basic usage">

    <xproc-example href="../../examples/json-merge/json-merge-01.xpl" output-is-text="true" fixup-pipeline-input="false" show-source="false">
      <pipeline-header>
        <para>The following pipeline produces a sequence of 3 documents on the <port>source</port> port of <step/>: An XML, a JSON map and a text
          document. This is merrily joined into a single map. Notice that the key/value pairs of the JSON map source document are now part of the
          resulting map.</para>
      </pipeline-header>
    </xproc-example>

  </example>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <example title="Computing a different key" id="diffkey">

    <xproc-example href="../../examples/json-merge/json-merge-02.xpl" output-is-text="true" fixup-pipeline-input="false" show-source="false">
      <pipeline-header>
        <para>The following pipeline produces a sequence of 3 documents on the <port>source</port> port of <step/>: An XML, a JSON map and another XML
          document. With the <option>key</option> option we set the key for the result map to the local name of the root elements:
            <code>local-name(/*)</code>. Notice that what happens with the keys for the second source document, which is itself a map, is not
          affected.</para>
      </pipeline-header>
    </xproc-example>

  </example>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <example title="Handling duplicates" id="duplicates">

    <xproc-example href="../../examples/json-merge/json-merge-03.xpl" output-is-text="true" fixup-pipeline-input="false" show-source="false">
      <pipeline-header>
        <para>The following pipeline produces a sequence of 2 JSON map documents on the <port>source</port> port of <step/>. Both maps contain an
          entry with the key <code>dupkey</code>. With <code>duplicates="use-last"</code> we specify that the last one must be used.</para>
      </pipeline-header>
    </xproc-example>

  </example>


  <!-- ======================================================================= -->

  <step-errors>
    <step-error code="XC0106"/>
    <step-error code="XC0110"/>
    <step-error code="XC0107"/>
  </step-errors>

</step>
