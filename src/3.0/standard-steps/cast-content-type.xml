<?xml version="1.0" encoding="UTF-8"?>
<step name="cast-content-type" version-idref="v30" category-idrefs="standard-steps misc" short-description="Changes the media type of documents"
  required="true" publish="false" href-specification="{$BASELINK-STANDARD-STEPS-V30}#c.cast-content-type"
  xsi:schemaLocation="http://www.xtpxlib.nl/ns/xprocref ../../../xsd/xprocref.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns="http://www.xtpxlib.nl/ns/xprocref">

  <!-- ======================================================================= -->

  <signature>

    <input port="source" content-types="any" primary="true" sequence="true">
      <description>
        <para>The document(s) to change the media type of.</para>
      </description>
    </input>

    <output port="result" content-types="any" primary="true" sequence="true">
      <description>
        <para>The resulting document(s)</para>
      </description>
    </output>

    <option name="content-type" required="true" as="xs:string">
      <description>
        <para>The media type of the resulting document(s).</para>
        <para>This must be a valid media type (either <code>type/subtype</code> or <code>type/subtype+ext</code>). If not, error <step-error-ref
            code="XD0079"/> is raised.</para>
      </description>
    </option>

    <option name="parameters" as="map(xs:QName,item()*)?" required="false" select="()">
      <description>
        <para>Parameters controlling the casting/transformation of the document(s). Keys, values and their meaning depend on the XProc processor
          used.</para>
      </description>
    </option>

  </signature>

  <!-- ======================================================================= -->

  <summary>
    <para>The <step/> step takes the document(s) appearing on its <port>source</port> port and changes their media type according to the value of the
        <option>content-type</option> option, transforming the document(s) if necessary.</para>
  </summary>

  <!-- ======================================================================= -->

  <description>
    <para>The <step/> step takes the documents appearing on its <port>source</port> port and changes/casts their media type according to the value of
      the <option>content-type</option> option. Sometimes this is a (very) simple operation: for instance, changing one XML media type to another
      simply changes the <property>content-type</property> document-property accordingly. However, you can also request more complex changes, like
      converting an XML document into JSON. </para>

    <para>TBD what for? </para>

    <para>Of course, not every document can be changed into every media type. The following sections describe what you can (and cannot) do. If you
      request an impossible cast, error <step-error-ref code="XC0071"/> is raised.</para>

    <para>A summary of what media types are and how XProc treats them can be found in the <xref linkend="cct-media-type-summary"/> section
      below.</para>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

    <section>
      <title>Converting XML documents</title>

      <para>When the input document is an XML document (has an XML media type), the following casts are supported:</para>

      <itemizedlist>

        <listitem>
          <para>Casting to another XML media type simply changes the <property>content-type</property> document-property.</para>
        </listitem>

        <listitem>
          <para>Casting to an HTML media type changes the <property>content-type</property> document-property and removes any
              <property>serialization</property> document-property. </para>
        </listitem>

        <listitem>
          <para>Casting to a JSON media type converts the XML into JSON:</para>
          <itemizedlist>
            <listitem>
              <para>The <link xlink:href="https://www.w3.org/TR/xpath-functions-31">XPath and XQuery Functions and Operators 3.1</link> standard
                defines an <link xlink:href="https://www.w3.org/TR/xpath-functions-31/#json-to-xml-mapping">XML format for the representation of JSON
                  data</link>. The XPath&#160;3.1 function <link xlink:href="https://www.w3.org/TR/xpath-functions-31/#func-xml-to-json"
                    ><code>fn:xml-to-json()</code></link> converts this format into a JSON conformant string (and for further processing, <link
                  xlink:href="https://www.w3.org/TR/xpath-functions-31/#func-parse-json"><code>fn:parse-json()</code></link> turns this string into a
                map/array).</para>
              <para>If an input document of <step/> is conformant to this <link
                  xlink:href="https://www.w3.org/TR/xpath-functions-31/#json-to-xml-mapping">XML format for the representation of JSON data</link>,
                it&#x2019;s converted into its JSON equivalent (like calling <code>fn:parse-json(fn:xml-to-json())</code>). See <example-ref
                  idref="converting-json-xml"/> for an example.</para>
            </listitem>
            <listitem>
              <para>If the input document has a <tag>c:param-set</tag> root element and <tag>c:param name=…" value=…"/</tag> child elements (the
                  <code>c</code> prefix here is bound to the <code>http://www.w3.org/ns/xproc-step</code> namespace), it will turn this into a JSON
                map with the values of the <code>name</code> attributes as keys. See the <example-ref idref="converting-param-sets"/> example.</para>
              <para>Param-sets are an XProc&#160;1.0 construct used for passing parameters (there were no maps in those days). Unless you&#160;re
                converting XProc&#160;1.0 steps into 3.x, it&#x2019;s unlikely you need this feature.</para>
            </listitem>
            <listitem>
              <para>In all other cases it&#x2019;s up to the XProc processor what happens. It could turn your XML into some kind of JSON but it could
                just as well raise an error.</para>
            </listitem>
          </itemizedlist>
          <para>A <property>serialization</property> document-property is removed when converting to JSON.</para>
        </listitem>

        <listitem>
          <para>Casting to a text media type serializes the XML document by calling <code>fn:serialize($doc,&#160;$param)</code>, where
              <literal>$doc</literal> is the document on the <port>source</port> port and <code>$param</code> is the serialization document-property
            of this document.</para>
          <para>A <property>serialization</property> document-property is removed.</para>
        </listitem>

        <listitem>
          <para>Casting to any other media type must support the case where the input document is a <tag>c:data</tag> document. The resulting document
            will have the specified media type and a representation that is the content of the <tag>c:data</tag> element after decoding the base64
            encoded content The serialization property is removed.</para>
          <para>
            <emphasis role="bold">[ERROR <step-error-ref code="XC0072"/>]</emphasis>
          </para>
          <para>
            <emphasis role="bold">[ERROR <step-error-ref code="XC0073"/>]</emphasis>
          </para>
          <para>
            <emphasis role="bold">[ERROR <step-error-ref code="XC0074"/>]</emphasis>
          </para>
          <para>Casting from an XML media type to any other media type when the input document is not a <tag>c:data</tag> document is
            implementation-defined.</para>
        </listitem>

      </itemizedlist>

    </section>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

    <section>
      <title>Converting HTML documents</title>

      <itemizedlist>
        <listitem>
          <para>Casting from an HTML media type to an XML media type changes “<literal>content-type</literal>” document-property and removes any
            serialization property. </para>
        </listitem>
        <listitem>
          <para>Casting from an HTML media type to another HTML media type changes “<literal>content-type</literal>” document-property.</para>
        </listitem>
        <listitem>
          <para>Casting from an HTML media type to a JSON media type is implementation-defined.</para>
        </listitem>
        <listitem>
          <para>Casting an an HTML media type to a text media type serializes the HTML document by calling <function>fn:serialize($doc,
              $param)</function> where <literal>$doc</literal> is the document on the <port>source</port> port and <literal>$param</literal> is the
            serialization property of this document. The resulting string is wrapped by a document node and returned on the <port>result</port> port.
            The serialization property is removed.</para>
        </listitem>
        <listitem>
          <para>Casting from an HTML media type to any other media type is implementation-defined.</para>
        </listitem>
      </itemizedlist>

    </section>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

    <section>
      <title>Converting JSON documents</title>

      <itemizedlist>
        <listitem>
          <para>Casting from a JSON media type to an XML media type converts the JSON into XML. An implementation must support the format specified in
            section “XML Representation of JSON” of <link xlink:href="https://www.w3.org/TR/xpath-functions-31/" role="newpage"
              xmlns:xlink="http://www.w3.org/1999/xlink">the XPath 3.1 functions</link> as default for the resulting XML. It is implementation-defined
            whether other result formats are supported. The serialization property is removed.</para>
        </listitem>
        <listitem>
          <para>Casting from a JSON media type to an HTML media type is implementation-defined.</para>
        </listitem>
        <listitem>
          <para>Casting from a JSON media type to another JSON media type changes “<literal>content-type</literal>” document-property.</para>
        </listitem>
        <listitem>
          <para>Casting from a JSON media type to a text media type serializes the JSON document by calling <function>fn:serialize($doc,
              $param)</function> where <literal>$doc</literal> is the document on the <port>source</port> port and <literal>$param</literal> is the
            serialization property of this document. The resulting string is wrapped by a document node and returned on the <port>result</port> port.
            The serialization property is removed.</para>
        </listitem>
        <listitem>
          <para>Casting from a JSON media type to any other media type is implementation-defined.</para>
        </listitem>
      </itemizedlist>

    </section>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

    <section>
      <title>Converting text documents</title>

      <itemizedlist>
        <listitem>
          <para>Casting from a text media type to an XML media type parses the text value of the document on <port>source</port> port by calling
              <function>fn:parse-xml</function>. <emphasis role="bold">[ERROR <step-error-ref code="XD0049"/>]</emphasis>. The serialization property
            is removed.</para>
        </listitem>
        <listitem>
          <para>Casting from a text media type to an HTML media type parses the text value of the document on <port>source</port> port into an XPath
            data model document that contains a tree of elements, attributes, and other nodes. The precise way in which text documents are parsed into
            the XPath data model is implementation-defined. <emphasis role="bold">[ERROR <step-error-ref code="XD0060"/>]</emphasis>. The
            serialization property is removed.</para>
        </listitem>
        <listitem>
          <para>Casting from a text media type to a JSON media type parses the text value of the document on <port>source</port> port by calling
              <function>fn:parse-json($doc, $par)</function> where <literal>$doc</literal> is the text document and <literal>$par</literal> is the
              <option>parameter</option> option. <emphasis role="bold">[ERROR <step-error-ref code="XD0057"/>]</emphasis>
            <emphasis role="bold">[ERROR <step-error-ref code="XD0058"/>]</emphasis>
            <emphasis role="bold">[ERROR <step-error-ref code="XD0059"/>]</emphasis> The serialization property is removed. </para>
        </listitem>
        <listitem>
          <para>Casting from a text media type to another text media type changes “<literal>content-type</literal>” document-property.</para>
        </listitem>
        <listitem>
          <para>Casting from a text media type to any other media type is implementation-defined.</para>
        </listitem>
      </itemizedlist>

    </section>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

    <section>
      <title>Converting other media types</title>

      <itemizedlist>
        <listitem xml:id="c.data">
          <para>Casting from a non-XML media type to an XML media type produces an XML document with a <tag>c:data</tag> document element. The
            original media type will be preserved in the <tag class="attribute">content-type</tag> attribute on the <tag>c:data</tag> element.</para>
          <para>
            <emphasis role="bold">[RNG Pattern VocabData]</emphasis>
          </para>
          <para>The content of the <tag>c:data</tag> element is the base64 encoded representation of the non-XML content. The serialization property
            is removed.</para>
        </listitem>
        <listitem>
          <para>Casting from any other media type to a HTML media type, a JSON media type or a text document is implementation-defined.</para>
        </listitem>
        <listitem>
          <para>Casting from any other media type to any other media type is implementation-defined.</para>
        </listitem>
      </itemizedlist>

    </section>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

    <section xml:id="cct-media-type-summary">
      <title>Media type summary</title>

      <para>TBD</para>
    </section>

  </description>

  <!-- ======================================================================= -->

  <detail>
    <para>If the value of the <option>content-type</option> option and the media type of a document are the same, the document will appear unchanged
      on the <port>result</port> port.</para>
  </detail>

  <detail>
    <xi:include href="../../text-fragments/document-properties-preserved.xml"/>
    <para>Exceptions are the <property>content-type</property> document-property which is updated accordingly and the
        <property>serialization</property> document-property which is sometimes removed.</para>
  </detail>

  <!-- ======================================================================= -->

  <example title="Converting the XML representation of JSON" id="converting-json-xml">

    <para>If an input document of <step/> is conformant to the XPath&#160;3.1 <link
        xlink:href="https://www.w3.org/TR/xpath-functions-31/#json-to-xml-mapping">XML format for the representation of JSON data</link> and the
        <option>content-type</option> option is a JSON media type, <step/> converts this into its JSON equivalent.</para>

    <xproc-example href="../../examples/cast-content-type/cast-content-type-02.xpl" output-is-text="true">
      <source-header>
        <para>The following source document is a shortened version of the example in the description of the <link
            xlink:href="https://www.w3.org/TR/xpath-functions-31/#json-to-xml-mapping">XML format for the representation of JSON data</link>: </para>
      </source-header>
      <result-header>
        <para>The resulting JSON map:</para>
      </result-header>
    </xproc-example>

  </example>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <example title="Converting param-sets" id="converting-param-sets">

    <para>Param-sets are constructs used in the XProc&#160;1.0 days for passing sets of parameters, for instance to XSLT stylesheets. The current
      version uses maps for this. To enable converting param-sets into maps, <step/> contains support for this. In XProc, a map is JSON data, so the
        <option>content-type</option> option must be a JSON media type.</para>

    <xproc-example href="../../examples/cast-content-type/cast-content-type-01.xpl" output-is-text="true">
      <source-header>
        <para>The source param-set document:</para>
      </source-header>
      <result-header>
        <para>The resulting JSON map:</para>
      </result-header>
    </xproc-example>

    <para>JSON maps are passed around as XPath maps, so it&#x2019;very easy to store such a map in a variable and use it later. Just add the following
      variable declaration directly after the <step/> invocation:</para>
    <programlisting xml:space="preserve"><![CDATA[<p:variable name="param-set-map" as="map(*)" select="."/>]]></programlisting>

    <para>Unless you&#x2019;re converting XProc&#160;1.0 code into a newer version. it&#160;s unlikely you need this param-set conversion
      feature.</para>

  </example>

  <!-- ======================================================================= -->

  <step-errors>
    <step-error code="XD0079"/>
    <step-error code="XC0071"/>
    <step-error code="XC0079"/>
    <step-error code="XC0072"/>
    <step-error code="XC0073"/>
    <step-error code="XC0074"/>
    <step-error code="XD0049"/>
    <step-error code="XD0060"/>
    <step-error code="XD0057"/>
    <step-error code="XD0058"/>
    <step-error code="XD0059"/>
  </step-errors>

</step>
