<?xml version="1.0" encoding="UTF-8"?>
<step name="cast-content-type" version-idref="v30" category-idrefs="standard-steps misc" short-description="Changes the media type of documents"
  required="true" publish="false" href-specification="{$BASELINK-STANDARD-STEPS-V30}#c.cast-content-type"
  xsi:schemaLocation="http://www.xtpxlib.nl/ns/xprocref ../../../xsd/xprocref.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:xi="http://www.w3.org/2001/XInclude" xmlns="http://www.xtpxlib.nl/ns/xprocref">

  <!-- ======================================================================= -->

  <signature>

    <input port="source" content-types="any" primary="true" sequence="true">
      <description>
        <para>The document(s) to change the media type of.</para>
      </description>
    </input>

    <output port="result" content-types="any" primary="true" sequence="true">
      <description>
        <para>The resulting document(s)</para>
      </description>
    </output>

    <option name="content-type" required="true" as="xs:string">
      <description>
        <para>The media type of the resulting document(s).</para>
        <para>This must be a valid media type (either <code>type/subtype</code> or <code>type/subtype+ext</code>). If not, error <step-error-ref
            code="XD0079"/> is raised.</para>
      </description>
    </option>

    <option name="parameters" as="map(xs:QName,item()*)?" required="false" select="()">
      <description>
        <para>Parameters controlling the casting/transformation of the document(s). Keys, values and their semantics depend on the XProc processor
          used.</para>
      </description>
    </option>

  </signature>

  <!-- ======================================================================= -->

  <summary>
    <para>The <step/> step takes the document(s) appearing on its <port>source</port> port and changes their media type according to the value of the
        <option>content-type</option> option, transforming the document(s) if necessary.</para>
  </summary>

  <!-- ======================================================================= -->

  <description>
    <para>The <step/> step takes the documents appearing on its <port>source</port> port and changes/casts their media type according to the value of
      the <option>content-type</option> option. Sometimes this is a (very) simple operation: for instance, changing one XML media type to another
      simply changes the <property>content-type</property> document-property accordingly. However, you can also request more complex changes, like
      converting an XML document into JSON. </para>

    <para>TBD what for? </para>

    <para>Of course, not every document can be changed into every media type. The following sections describe what you can (and cannot) do. If you
      request an impossible cast, error <step-error-ref code="XC0071"/> is raised.</para>

    <para>A summary of what media types are and how XProc treats them can be found in the <xref linkend="cct-media-type-summary"/> section
      below.</para>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

    <section>
      <title>Converting XML documents</title>

      <para>When the input document is an XML document (has an XML media type), the following casts are supported:</para>

      <itemizedlist>

        <listitem>
          <para>Casting to another XML media type simply changes the <property>content-type</property> document-property.</para>
        </listitem>

        <listitem>
          <para>Casting to an HTML media type changes the <property>content-type</property> document-property and removes any
              <property>serialization</property> document-property. </para>
        </listitem>

        <listitem>
          <para>Casting to a JSON media type converts the XML into JSON. The precise nature of the conversion from XML to JSON is depends on the XProc
            processor used. There are, however, some special cases:</para>
          <itemizedlist>
            <listitem>
              <para>If the input document is an XML representation of JSON as defined in <link xlink:href="https://www.w3.org/TR/xpath-functions-31/"
                  role="newpage" xmlns:xlink="http://www.w3.org/1999/xlink">the XPath 3.1 functions</link>, implementations must produce the same
                result as <code>fn:parse-json(fn:xml-to-json())</code>. TBD EXAMPLE</para>
            </listitem>
            <listitem>
              <para>TBD EXAMPLE If the input document has a <tag>c:param-set</tag> document element, an instance of <literal>map(xs:QName,
                  xs:string)</literal> must be returned that represents the document's <tag>c:param</tag> elements.</para>
            </listitem>
          </itemizedlist>
          <para>A <property>serialization</property> document-property is removed.</para>
        </listitem>

        <listitem>
          <para>Casting to a text media type serializes the XML document by calling <code>fn:serialize($doc,&#160;$param)</code>, where
              <literal>$doc</literal> is the document on the <port>source</port> port and <code>$param</code> is the serialization document-property
            of this document.</para>
          <para>A <property>serialization</property> document-property is removed.</para>
        </listitem>

        <listitem>
          <para>Casting to any other media type must support the case where the input document is a <tag>c:data</tag> document.
            The resulting document will have the specified media type and a representation that is the content of the <tag>c:data</tag> element after
            decoding the base64 encoded content The serialization property is removed.</para>
          <para>
            <emphasis role="bold">[ERROR <step-error-ref code="XC0072"/>]</emphasis>
          </para>
          <para>
            <emphasis role="bold">[ERROR <step-error-ref code="XC0073"/>]</emphasis>
          </para>
          <para>
            <emphasis role="bold">[ERROR <step-error-ref code="XC0074"/>]</emphasis>
          </para>
          <para>Casting from an XML media type to any other media type when the input document is not a <tag>c:data</tag> document is
            implementation-defined.</para>
        </listitem>

      </itemizedlist>

    </section>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

    <section>
      <title>Converting HTML documents</title>

      <itemizedlist>
        <listitem>
          <para>Casting from an HTML media type to an XML media type changes “<literal>content-type</literal>” document-property and removes any
            serialization property. </para>
        </listitem>
        <listitem>
          <para>Casting from an HTML media type to another HTML media type changes “<literal>content-type</literal>” document-property.</para>
        </listitem>
        <listitem>
          <para>Casting from an HTML media type to a JSON media type is implementation-defined.</para>
        </listitem>
        <listitem>
          <para>Casting an an HTML media type to a text media type serializes the HTML document by calling <function>fn:serialize($doc,
              $param)</function> where <literal>$doc</literal> is the document on the <port>source</port> port and <literal>$param</literal> is the
            serialization property of this document. The resulting string is wrapped by a document node and returned on the <port>result</port> port.
            The serialization property is removed.</para>
        </listitem>
        <listitem>
          <para>Casting from an HTML media type to any other media type is implementation-defined.</para>
        </listitem>
      </itemizedlist>

    </section>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

    <section>
      <title>Converting JSON documents</title>

      <itemizedlist>
        <listitem>
          <para>Casting from a JSON media type to an XML media type converts the JSON into XML. An implementation must support the format specified in
            section “XML Representation of JSON” of <link xlink:href="https://www.w3.org/TR/xpath-functions-31/" role="newpage"
              xmlns:xlink="http://www.w3.org/1999/xlink">the XPath 3.1 functions</link> as default for the resulting XML. It is implementation-defined
            whether other result formats are supported. The serialization property is removed.</para>
        </listitem>
        <listitem>
          <para>Casting from a JSON media type to an HTML media type is implementation-defined.</para>
        </listitem>
        <listitem>
          <para>Casting from a JSON media type to another JSON media type changes “<literal>content-type</literal>” document-property.</para>
        </listitem>
        <listitem>
          <para>Casting from a JSON media type to a text media type serializes the JSON document by calling <function>fn:serialize($doc,
              $param)</function> where <literal>$doc</literal> is the document on the <port>source</port> port and <literal>$param</literal> is the
            serialization property of this document. The resulting string is wrapped by a document node and returned on the <port>result</port> port.
            The serialization property is removed.</para>
        </listitem>
        <listitem>
          <para>Casting from a JSON media type to any other media type is implementation-defined.</para>
        </listitem>
      </itemizedlist>

    </section>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

    <section>
      <title>Converting text documents</title>

      <itemizedlist>
        <listitem>
          <para>Casting from a text media type to an XML media type parses the text value of the document on <port>source</port> port by calling
              <function>fn:parse-xml</function>. <emphasis role="bold">[ERROR <step-error-ref code="XD0049"/>]</emphasis>. The serialization property
            is removed.</para>
        </listitem>
        <listitem>
          <para>Casting from a text media type to an HTML media type parses the text value of the document on <port>source</port> port into an XPath
            data model document that contains a tree of elements, attributes, and other nodes. The precise way in which text documents are parsed into
            the XPath data model is implementation-defined. <emphasis role="bold">[ERROR <step-error-ref code="XD0060"/>]</emphasis>. The
            serialization property is removed.</para>
        </listitem>
        <listitem>
          <para>Casting from a text media type to a JSON media type parses the text value of the document on <port>source</port> port by calling
              <function>fn:parse-json($doc, $par)</function> where <literal>$doc</literal> is the text document and <literal>$par</literal> is the
              <option>parameter</option> option. <emphasis role="bold">[ERROR <step-error-ref code="XD0057"/>]</emphasis>
            <emphasis role="bold">[ERROR <step-error-ref code="XD0058"/>]</emphasis>
            <emphasis role="bold">[ERROR <step-error-ref code="XD0059"/>]</emphasis> The serialization property is removed. </para>
        </listitem>
        <listitem>
          <para>Casting from a text media type to another text media type changes “<literal>content-type</literal>” document-property.</para>
        </listitem>
        <listitem>
          <para>Casting from a text media type to any other media type is implementation-defined.</para>
        </listitem>
      </itemizedlist>

    </section>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

    <section>
      <title>Converting other media types</title>

      <itemizedlist>
        <listitem xml:id="c.data">
          <para>Casting from a non-XML media type to an XML media type produces an XML document with a <tag>c:data</tag> document element. The
            original media type will be preserved in the <tag class="attribute">content-type</tag> attribute on the <tag>c:data</tag> element.</para>
          <para>
            <emphasis role="bold">[RNG Pattern VocabData]</emphasis>
          </para>
          <para>The content of the <tag>c:data</tag> element is the base64 encoded representation of the non-XML content. The serialization property
            is removed.</para>
        </listitem>
        <listitem>
          <para>Casting from any other media type to a HTML media type, a JSON media type or a text document is implementation-defined.</para>
        </listitem>
        <listitem>
          <para>Casting from any other media type to any other media type is implementation-defined.</para>
        </listitem>
      </itemizedlist>

    </section>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

    <section xml:id="cct-media-type-summary">
      <title>Media type summary</title>

      <para>TBD</para>
    </section>

  </description>

  <!-- ======================================================================= -->

  <detail>
    <para>If the value of the <option>content-type</option> option and the media type of a document are the same, the document will appear unchanged
      on the <port>result</port> port.</para>
  </detail>

  <detail>
    <xi:include href="../../text-fragments/document-properties-preserved.xml"/>
    <para>Exceptions are the <property>content-type</property> document-property which is updated accordingly and the
        <property>serialization</property> document-property which is sometimes removed.</para>
  </detail>

  <!-- ======================================================================= -->

  <step-errors>
    <step-error code="XD0079"/>
    <step-error code="XC0071"/>
    <step-error code="XC0079"/>
    <step-error code="XC0072"/>
    <step-error code="XC0073"/>
    <step-error code="XC0074"/>
    <step-error code="XD0049"/>
    <step-error code="XD0060"/>
    <step-error code="XD0057"/>
    <step-error code="XD0058"/>
    <step-error code="XD0059"/>
  </step-errors>

</step>
