<?xml version="1.0" encoding="UTF-8"?>
<step name="error" version-idref="v30" category-idrefs="standard-steps misc" short-description="Raises an error" required="true" publish="true"
  href-specification="{$BASELINK-STANDARD-STEPS-V30}#c.error" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
  xsi:schemaLocation="http://www.xtpxlib.nl/ns/xprocref ../../../xsd/xprocref.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="http://www.xtpxlib.nl/ns/xprocref">

  <!-- ======================================================================= -->

  <signature>

    <input port="source" sequence="true" content-types="text xml" primary="true">
      <description>
        <para>The contents/message of the error raised.</para>
      </description>
    </input>

    <output port="result" sequence="true" content-types="any" primary="true">
      <description>
        <para>This port is just there for the convenience of pipeline authors. Nothing will ever appear on this port (since <step/> stops execution of
          the pipeline by raising an error).</para>
      </description>
    </output>

    <option name="code" required="true" as="xs:QName">
      <description>
        <para>The code for the error raised.</para>
      </description>
    </option>

  </signature>

  <!-- ======================================================================= -->

  <summary>
    <para>The <step/> step raises a (dynamic) error, using the value of the <option>code</option> option as the error code. The document(s) on its
        <port>source</port> port become the error message(s).</para>
  </summary>

  <!-- ======================================================================= -->

  <description>
    <para>the <step/> step raises a dynamic error, breaking the pipeline&#x2019;s document flow.</para>
    <para>An error has a code, which must be provided using the <option>code</option> option. An error code is a QName (a name with an optional
      namespace part). This code is shown in the resulting error message. You can also use this code for catching this specific error in a
        <code>p:try/p:catch</code> construction. Using a namespace in an error code raised by <step/> is recommended because it because it clearly
      distinguishes itself from errors raised by XProc itself.</para>
    <para>The text or XML document(s) on the step&#x2019;s <port>source</port> port become the error message(s) accompanying the error. They will
      return as the contents of the <code>c:errors/c:error</code> element(s) in the <link xlink:href="{$BASELINK-CURRENT}xproc/#err-vocab"
        role="newpage">error report document</link> produced by the error.</para>
    <para>The <step/> step also has a (primary) output port, but that is just for the convenience of the pipeline author: nothing will ever appear on
      it (since the flow is broken by the generated error). It makes it easier to insert a <step/> in situations where a primary output port is
      required, for instance inside a <code>p:if</code> that tests whether an error must be raised.</para>
  </description>

  <!-- ======================================================================= -->

  <detail>
    <para>If more than one document appears on the <port>source</port> port of <step/>, all source documents become children of a single
        <tag>p:error</tag> element.</para>
  </detail>

  <!-- ======================================================================= -->

  <example title="Basic usage" id="error-basic">

    <para>The following example raises an error using <step/>. Please notice that we use a namespace for the error code (which is recommended but not
      required).</para>

    <xproc-example href="../../examples/error/error-01.xpl" keep-namespace-prefixes-pipeline="my" keep-namespace-prefixes-result="my">
      <pipeline-header>
        <para>The example pipeline checks the result status. Watch out: the <code>p:try/p:catch</code> construction that surrounds <step/> is there
          for <emphasis>example purposes only</emphasis> (don&#x2019;t try this at home)! It takes care of showing the resulting error report document
          as the step&#x2019;s result.</para>
      </pipeline-header>
      <result-header>
        <para>The resulting error report document:</para>
      </result-header>
    </xproc-example>

    <xproc-example href="../../examples/error/error-02.xpl" keep-namespace-prefixes-pipeline="my" keep-namespace-prefixes-result="my"
      show-source="false">
      <pipeline-header>
        <para>Notice that in the example above the error message is inside a <tag>message</tag> element. Usually however, error messages are just
          text, strings. This can be accomplished by providing the error message on the <step/>&#160;<port>source</port> port as a text
          document:</para>
      </pipeline-header>
      <result-header>
        <para>The resulting error report document:</para>
      </result-header>
    </xproc-example>

  </example>

</step>
