<?xml version="1.0" encoding="UTF-8"?>
<step name="text-sort" version-idref="v30" category-idrefs="standard-steps text" short-description="Sorts lines in a text document" required="true"
  publish="true" href-specification="{$BASELINK-STANDARD-STEPS-V30}#c.text-sort"
  xsi:schemaLocation="http://www.xtpxlib.nl/ns/xprocref ../../../xsd/xprocref.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns="http://www.xtpxlib.nl/ns/xprocref">

  <signature>
    <input port="source" primary="true" sequence="false" content-types="text">

      <description>
        <para>The text document to sort the lines of.</para>
      </description>
    </input>

    <output port="result" primary="true" sequence="false" content-types="text">
      <description>
        <para>The resulting document.</para>
      </description>
    </output>

    <option name="sort-key" as="xs:string" select="'.'" subtype="XPathExpression" required="false">
      <description>
        <para>An XPath expression that results in the string to sort the lines on. It is evaluated for each line, with the line to sort (as a string)
          as context item (accessible with the dot operator <code>.</code>).</para>
        <para>During this evaluation, the <code>position()</code> and <code>last()</code> functions are available to get the position of the line in
          the document and the number of lines. See <example-ref idref="reverse-order"/> for an example of using these functions here.</para>
      </description>
    </option>

    <option name="order" as="xs:string" select="'ascending'" values="('ascending', 'descending')" required="false">
      <description>
        <para>The sort order, either <code>ascending</code> (default) or <code>descending</code>.</para>
      </description>
    </option>

    <option name="case-order" as="xs:string?" values="('upper-first', 'lower-first')" required="false">
      <description>
        <para>Defines whether upper-case characters are considered to come before or after lower-case characters. Must have a value
            <code>upper-first</code> or <code>lower-first</code>.</para>
        <para>If not provided, its value is language-dependent.</para>
        <para>This option is only used if no value is available for the <option>collation</option> option.</para>
      </description>
    </option>

    <option name="lang" as="xs:language?" required="false">
      <description>
        <para>The language to sort the lines for. This influences, for instance, the order of accented characters. Its default value is
          implementation-defined and therefore dependent on the XProc processor used.</para>
        <para>A value for the <option>lang</option> option must be a valid language code according to <link
            xlink:href="https://www.ietf.org/rfc/rfc4646.txt">RFC&#160;4646 (tags for identifying languages)</link>. For instance: <code>en-us</code>
          or <code>nl-nl</code>.</para>
        <para>This option is only used if no value is available for the <option>collation</option> option.</para>
      </description>
    </option>

    <option name="collation" as="xs:string" select="'https://www.w3.org/2005/xpath-functions/collation/codepoint'" required="false">
      <description>
        <para>The collation to use for sorting. The only collation that is always supported is the <code><link
              xlink:href="https://www.w3.org/2005/xpath-functions/collation/codepoint/">Unicode codepoint collation</link></code>. This is also the
          default value for this option. Whether any other collations are supported is implementation-defined and therefore dependent on the XProc
          processor used.</para>
      </description>
    </option>

    <option name="stable" as="xs:boolean" select="true()" required="false">
      <description>
        <para>This option tells the sorting algorithm what to do with lines with same sorting key. If its value is <code>true</code> (default), these
          lines are retained in their original order. If <code>false</code>, there is no need to this and the algorithm <emphasis>may</emphasis>
          change their order (but not necessarily so).</para>
      </description>
    </option>

  </signature>

  <!-- ======================================================================= -->

  <summary>
    <para>The <step/> step sorts lines in the text document appearing on its <port>source</port> port.</para>
  </summary>

  <!-- ======================================================================= -->

  <description>
    <para>The <step/> step takes the text document appearing on its <port>source</port> port and turns this into lines. These lines are then sorted
      according to the values of the step options. This sort process is the same as described for the XSLT <code><link
          xlink:href="https://www.w3.org/TR/xslt-30/#xsl-sort">xsl:sort</link></code> instruction. The result appears on the <port>result</port>
      port.</para>
  </description>

  <!-- ======================================================================= -->

  <detail>
    <xi:include href="../../text-fragments/document-properties-preserved.xml"/>
  </detail>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <detail>
    <xi:include href="../../text-fragments/line-end-detail.xml"/>
  </detail>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <detail>
    <xi:include href="../../text-fragments/line-end-return.xml"/>
  </detail>

  <!-- ======================================================================= -->

  <example title="Basic usage">

    <para>Assume we have a text document, called <code>lines.txt</code>, that looks like this and we want to sort the lines using <step/>:</para>

    <example-doc href="../../examples/text-sort/lines.txt"/>

    <xproc-example href="../../examples/text-sort/text-sort-01.xpl" show-source="false" fixup-pipeline-input="false" output-is-text="true"/>

  </example>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <example title="Reversing the line order" id="reverse-order">

    <para>This example is not very useful in itself, but it shows the use of the <code>position()</code> and <code>last()</code> function in the
        <option>sort-key</option> option. We set this option to <code>last()&#160;-&#160;position()</code>, which has the effect of
        <emphasis>reversing</emphasis> the line order.</para>

    <para>Source document (<code>lines-2.txt</code>):</para>
    <example-doc href="../../examples/text-sort/lines-2.txt"/>

    <xproc-example href="../../examples/text-sort/text-sort-02.xpl" show-source="false" fixup-pipeline-input="false" output-is-text="true"/>

  </example>

  <!-- ======================================================================= -->

  <step-errors>
    <step-error code="XC0098"/>
    <step-error code="XC0099"/>
  </step-errors>

</step>
