<?xml version="1.0" encoding="UTF-8"?>
<step name="load" version-idref="v30" category-idrefs="standard-steps env" short-description="Loads a document" required="true" publish="true"
  href-specification="{$BASELINK-STANDARD-STEPS-V30}#c.load" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
  xsi:schemaLocation="http://www.xtpxlib.nl/ns/xprocref ../../../xsd/xprocref.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="http://www.xtpxlib.nl/ns/xprocref">

  <!-- ======================================================================= -->

  <signature>

    <output port="result" content-types="any" primary="true" sequence="false">
      <description>
        <para>The loaded document.</para>
      </description>
    </output>

    <option name="href" required="true" as="xs:anyURI">
      <description>
        <para>The URI for loading the document.</para>
        <para>In most cases, <step/> will be used to load a file from disk. An absolute URI for this must start with <code>file://</code>. For
          instance, on Windows, <code>file:///C:/some/path/document.xml</code> (although Windows uses backslashes (<code>\</code>) to separate path
          components, slashes (<code>/</code>) work fine and are more universal). Using a single slash after <code>file:</code> also works:
            <code>file:/C:/some/path/document.xml</code>.</para>
        <para>If this value is relative, it is resolved against the base URI of the element on which this option is specified. In most cases this will
          be the static base URI of your pipeline (the path where the XProc source containing the <step/> step is stored).</para>
      </description>
    </option>

    <option name="parameters" as="map(xs:QName,item()*)?" required="false">
      <description>
        <para>Parameters controlling the loading of the document. Some keys and values are determined by the type of document loaded (see below). Any
          additional parameters are implementation-defined and therefore dependent on the XProc processor used.</para>
      </description>
    </option>

    <option name="content-type" as="xs:string?" required="false">
      <description>
        <para>The content-type of the document to load, for instance <code>text/plain</code> or <code>application/json</code>. The document is
          interpreted according to this.</para>
        <para>If this option is not present, the content-type is determined as described in <xref linkend="determining-content-type"/>.</para>
      </description>
    </option>

    <option name="document-properties" as="map(xs:QName, item()*)?" required="false">
      <description>
        <para>Any document-properties for the loaded document.</para>
      </description>
    </option>

  </signature>

  <!-- ======================================================================= -->

  <summary>
    <para>The <step/> loads a document indicated by a URI and returns this on its <port>result</port> port.</para>
  </summary>

  <!-- ======================================================================= -->

  <description>

    <para>The <step/> step is one of the few that has no <port>source</port> port. It is used to load some document from disk, the web or elsewhere,
      and returns this document on its <port>result</port> port. XProc must know what kind of document it is loading, the mechanism for this is
      described in <xref linkend="determining-content-type"/>. It is also possible to set document-properties.</para>

    <para>What exactly happens depends on the loaded document&#x2019;s content-type:</para>
    <itemizedlist>
      <listitem>
        <para>For an XML document-type, the document is loaded and interpreted (de-serialized) as XML.</para>
        <para>There is one pre-defined parameter for the <option>parameters</option> option: <code>dtd-validate</code> (<code>xs:boolean</code>). If
            <code>true</code>, DTD validation must be performed when parsing the document.</para>
      </listitem>
      <listitem>
        <para>Text document-types are loaded &#x201c;as-is&#x201d;. </para>
      </listitem>
      <listitem>
        <para>For a JSON document-type, the document is loaded and interpreted (de-serialized) as JSON.</para>
        <para>The <option>parameters</option> option recognizes the parsing options as defined for the XPath <link
            xlink:href="https://www.w3.org/TR/xpath-functions-31/#func-parse-json" role="newpage"><code>parse-json()</code></link> function (the
            <code>$options</code> argument).</para>
      </listitem>
      <listitem>
        <para>For an HTML document-type, the document is loaded and parsed into well-formed XML, even although HTML documents do not have to be
          well-formed. How this is done exactly is implementation-defined and therefore dependent on the XProc processor used.</para>
      </listitem>
      <listitem>
        <para>For any other document-type, the document is loaded as a binary document.</para>
      </listitem>
    </itemizedlist>

    <para>There are many ways to load a document into an XProc pipeline. For instance, you could use the <code>href</code> attribute of
        <tag>p:with-input</tag>, or use its <tag>p:document</tag> child element. The <tag>p:document</tag> element is even
        <emphasis>defined</emphasis> as having the same functionality as <step/>, so there&#x2019;s no difference in functionality.</para>
    <para>Why then <step/>? Its main raison d&#x2019;Ãªtre is probably as left-over from the XProc&#160;1.0 days. Using a <step/> in XProc&#160;1.0 was
      the only way to dynamically load a document, for instance when you had computed its filename. In recent versions, using AVTs, this is no longer
      a problem: <tag>p:with-input href="{{$filename}"/</tag>. </para>
    <para>The main reason for using <step/> probably comes from software engineering: it makes it very explicit in your code what you&#x2019;re doing,
      an explicit <step/> stands out more than a nested <tag>p:document</tag>. Whether this is reason enough is up to you.</para>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

    <section xml:id="determining-content-type">
      <title>Determining the content-type</title>

      <para>When a document is loaded, <step/> must know its content-type. This is determined as follows:</para>
      <itemizedlist>
        <listitem>
          <para>When a <option>content-type</option> option is specified, this is used.</para>
        </listitem>
        <listitem>
          <para>If a protocol is used that specifies/returns a content-type, this is used. This is for instance the case when loading documents over
            HTTP(S).</para>
        </listitem>
        <listitem>
          <para>If no explicit type information was found, determining the content-type is implementation-defined and therefore dependent on the XProc
            processor used.</para>
          <para>When loading a document from disk (using the <code>file://</code> protocol), in most cases, the XProc processor determines the
            content-type based on the filename extension. So a <code>.xml</code> file will become XML, <code>.txt</code> text, etc. What extensions
            are mapped to what content-type is, again, implementation-defined. However, you can be reasonably sure the most common extensions are
            interpreted correctly.</para>
        </listitem>
      </itemizedlist>
    </section>
  </description>

  <!-- ======================================================================= -->

  <detail>
    <para>With regard to the document-properties of the loaded document:</para>
    <itemizedlist>
      <listitem>
        <para>The <property>content-type</property> document-property is the content-type of the loaded document. See also <xref
            linkend="determining-content-type"/>.</para>
      </listitem>
      <listitem>
        <para>The <property>base-uri</property> document-property is, in most cases, the URI the document is loaded from, as indicated by the
            <option>href</option> option.</para>
        <para>However, the <option>document-properties</option> option might also contain a <code>base-uri</code> entry. If so, the value in the
            <option>document-properties</option> option is used.</para>
      </listitem>
    </itemizedlist>
  </detail>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <detail>
    <para>A content-type can be specified using the <option>content-type</option> option and as en entry in the <option>document-properties</option>
      option map. If both are present they must be the same. If not, error <step-error-ref code="XD0062"/> is raised.</para>
  </detail>

  <!-- ======================================================================= -->

  <example title="Basic usage">

    <para>Assume there is an XML document (in the same location as the pipeline) called <code>extra.xml</code> with the following contents:</para>
    <example-doc href="../../examples/load/extra.xml"/>

    <xproc-example href="../../examples/load/load-01.xpl" show-source="false">
      <pipeline-header>
        <para>The most simple pipeline that uses <step/> to load this document is:</para>
      </pipeline-header>
    </xproc-example>

  </example>

  <!-- ======================================================================= -->

  <step-errors>
    <step-error code="XD0064"/>
    <step-error code="XD0011"/>
    <step-error code="XD0079"/>
    <step-error code="XD0062"/>
    <step-error code="XD0049"/>
    <step-error code="XD0023"/>
    <step-error code="XD0043"/>
    <step-error code="XD0060"/>
    <step-error code="XD0057"/>
    <step-error code="XD0058"/>
    <step-error code="XD0059"/>
    <step-error code="XD0078"/>
  </step-errors>

</step>
