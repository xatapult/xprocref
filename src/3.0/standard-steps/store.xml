<?xml version="1.0" encoding="UTF-8"?>
<step name="store" version-idref="v30" category-idrefs="standard-steps env" short-description="Stores a document" required="true" publish="true"
  href-specification="{$BASELINK-STANDARD-STEPS-V30}#c.store" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
  xsi:schemaLocation="http://www.xtpxlib.nl/ns/xprocref ../../../xsd/xprocref.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="http://www.xtpxlib.nl/ns/xprocref">

  <!-- ======================================================================= -->

  <signature>

    <input port="source" content-types="any" primary="true" sequence="false">
      <description>
        <para>The document to store.</para>
      </description>
    </input>

    <output port="result" content-types="any" primary="true" sequence="false">
      <description>
        <para>The resulting document. This will be exactly the same as the document on the <port>source</port> port.</para>
      </description>
    </output>

    <output port="result-uri" content-types="application/xml" primary="false" sequence="false">
      <description>
        <para>An XML document consisting of just a single <tag>c:result</tag> element containing the <emphasis>absolute</emphasis> URI the document is
          stored to (the <code>c</code> prefix here is bound to the <code>http://www.w3.org/ns/xproc-step</code> namespace).</para>
        <para>Example: <code><![CDATA[<c:result xmlns:c="http://www.w3.org/ns/xproc-step">file:///some/path/document.xml</c:result>]]></code></para>
      </description>
    </output>

    <option name="href" required="true" as="xs:anyURI">
      <description>
        <para>The URI to store the document to.</para>
        <para>In most cases, <step/> will be used to store a document to disk. An absolute URI for this must start with <code>file://</code>. For
          instance, on Windows, <code>file:///C:/some/path/document.xml</code> (although Windows uses backslashes (<code>\</code>) to separate path
          components, slashes (<code>/</code>) work fine and are more universal). Using a single slash after <code>file:</code> also works:
            <code>file:/C:/some/path/document.xml</code>. An attempt will be made to create all non-existing folders in the path.</para>
        <para>If this value is relative, it is resolved against the base URI of the element on which this option is specified. In most cases this will
          be the static base URI of your pipeline (the path where the XProc source containing the <step/> step is stored).</para>
      </description>
    </option>

    <option name="serialization" as="map(xs:QName,item()*)?" required="false">
      <description>
        <para>This option can supply a map with <link xlink:href="https://www.w3.org/TR/xslt-xquery-serialization-31/" role="newpage">serialization
            properties</link> for storing the document.</para>
        <xi:include href="../../text-fragments/merge-serialization-properties.xml"/>
        <para>Example: <code>serialization="map{'indent':&#160;true()}"</code></para>
      </description>
    </option>

  </signature>

  <!-- ======================================================================= -->

  <summary>
    <para>The <step/> step stores the document appearing on its <port>source</port> port to a URI. This document is passed unchanged to the
        <port>result</port> port. It outputs the absolute URI of the location of the stored document on the <port>result-uri</port> port.</para>
  </summary>

  <!-- ======================================================================= -->

  <description>

    <para>The <step/> step stores the document appearing on its <port>source</port> port to a URI. This document is passed unchanged to the
        <port>result</port> port. So within the pipeline the step acts as a <step-ref name="p:identity"/> step.</para>

    <para>It outputs the absolute URI of the location of the stored document on the <port>result-uri</port> port.</para>

  </description>

  <!-- ======================================================================= -->

  <detail>
    <xi:include href="../../text-fragments/document-properties-preserved.xml"/>
  </detail>

  <!-- ======================================================================= -->

  <example title="Basic usage">

    <para>Whatever input document is passed to the following pipeline, it is stored to disk in a document <code>tmp/x.xml</code>, relative to where
      the pipeline is stored. The final <step-ref name="p:identity"/> step is just used to show you the document appearing on the
        <port>result-uri</port> port.</para>

    <xproc-example href="../../examples/store/store-02.xpl" show-source="false"/>

    <para>Doing something with what appears on the <port>result-uri</port> port is of course completely optional. If you don&#x2019;t attach anything
      to this port, the <tag>c:result</tag> document will simply disappear into oblivion.</para>

  </example>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <example title="Using p:store for writing intermediate results">

    <para>When developing a pipeline, you often want to take a look at what exactly is flowing through it at a certain stage. Inserting a (temporary)
      <step/> step is the most easy way to quickly write some intermediate result to a temporary file on disk for inspection. Since <step/> acts like
      a <step-ref name="p:identity"/> step. nothing happens to the flow in your pipeline.</para>

    <programlisting xml:space="preserve"><![CDATA[…
<p:store href="file:///my/debug/files/location/stepx.xml"/>
…]]></programlisting>

    <para>Sometimes you want to keep these temporary storage steps after development. You never know what bugs will pop up and you might need them
      again! XProc has static options that you can use for this:</para>

    <example-doc href="../../examples/store/store-01.xpl"/>

    <para>For the production version you set the <code>write-debug-documents</code> static option to <code>false()</code>. This makes the <step/>
      disappear from the processed code, as if it was never there…</para>

  </example>

  <!-- ======================================================================= -->

  <step-errors>
    <step-error code="XC0050"/>
  </step-errors>

</step>
