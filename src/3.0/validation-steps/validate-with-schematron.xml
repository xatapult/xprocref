<?xml version="1.0" encoding="UTF-8"?>
<step name="validate-with-schematron" version-idref="v30" category-idrefs="validation-steps additional-standards"
  short-description="Validates a document using Schematron" required="false" publish="false"
  href-specification="{$BASELINK-VALIDATION-STEPS-V30}#c.validate-with-schematron"
  xsi:schemaLocation="http://www.xtpxlib.nl/ns/xprocref ../../../xsd/xprocref.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns="http://www.xtpxlib.nl/ns/xprocref">

  <!-- ======================================================================= -->

  <signature>

    <input port="source" primary="true" content-types="xml html" sequence="false">
      <description>
        <para>The document to validate.</para>
      </description>
    </input>

    <input port="schema" content-types="xml" primary="false" sequence="false">
      <description>
        <para>The Schematron schema to validate against.</para>
      </description>
    </input>

    <output port="result" primary="true" content-types="xml html" sequence="false">
      <description>
        <para>A verbatim copy of the document that appeared on the <port>source</port> port.</para>
        <para>Depending on the XProc processor used and/or the configuration, PSVI (Post-Schema-Validation-Infoset) annotations (see the <link
            xlink:href="https://www.w3.org/TR/xmlschema-1/" role="newpage">XML Schema recommendation</link>) might be added.</para>
      </description>
    </output>

    <output port="report" sequence="true" content-types="xml json" primary="false">
      <description>
        <para>A report that describes the validation results, both for valid and invalid source documents. The format for this report is determined by
          the <option>report-format</option> option.</para>
        <para>When the <option>assert-valid</option> option is <code>true</code> and the document is <emphasis>invalid</emphasis>, nothing will appear
          on this port because error <step-error-ref code="XC0054"/> is raised.</para>
      </description>
    </output>

    <option name="parameters" as="map(xs:QName,item()*)?" required="false">
      <description>
        <para>Parameters controlling the validation. See <xref linkend="validation-parameters"/> for more information.</para>
      </description>
    </option>

    <option name="phase" select="'#DEFAULT'" as="xs:string" required="false">
      <description>
        <para>The Schematron schema phase to select.</para>
      </description>
    </option>

    <option name="assert-valid" select="true()" as="xs:boolean" required="false">
      <description>
        <para>Determines what happens if the document is <emphasis>invalid</emphasis>:</para>
        <itemizedlist>
          <listitem>
            <para>If <code>true</code>, error <step-error-ref code="XC0054"/> is raised.</para>
          </listitem>
          <listitem>
            <para>If <code>false</code>, the step always succeeds. The validity of the document must be determined by inspecting the document that
              appears on the <port>report</port> port.</para>
          </listitem>
        </itemizedlist>
      </description>
    </option>

    <option name="report-format" select="'svrl'" as="xs:string" required="false">
      <description>
        <para>The format for the document on the <port>report</port> port:</para>
        <itemizedlist>
          <listitem>
            <para>The value <code>svrl</code> (default) produces a report in <link xlink:href="https://schematron.com/document/3427.html"
                role="newpage">SVRL</link> (Schematron Validation Report Language).</para>
          </listitem>
          <listitem>
            <para>The value <code>xvrl</code> (default) produces a report in <link xlink:href="https://spec.xproc.org/master/head/xvrl/"
                role="newpage">XVRL</link> (Extensible Validation Report Language).</para>
          </listitem>
          <listitem>
            <para>Whether any other formats are supported is implementation-defined and therefore dependent on the XProc processor used.</para>
          </listitem>
        </itemizedlist>
      </description>
    </option>

  </signature>

  <!-- ======================================================================= -->

  <summary>
    <para>The <step/> step validates the document appearing on the <port>source</port> port using Schematron validation. The Schematron schema is
      supplied through the <port>schema</port> port. The <port>result</port> port emits a copy of the source document.</para>
  </summary>

  <!-- ======================================================================= -->

  <description>

    <para>The <step/> step applies <link xlink:href="https://schematron.com/" role="newpage" xmlns:xlink="http://www.w3.org/1999/xlink"
        >Schematron</link> processing to the document appearing on the <port>source</port> port. The Schematron schema must be supplied using the
        <port>schema</port> port.</para>

    <para>The outcome of the step, what appears on the <port>result</port> port, is a verbatim copy of the source document (with the exception of
      optionally adding PSVI (Post-Schema-Validation-Infoset) annotations, see the <link xlink:href="https://www.w3.org/TR/xmlschema-1/"
        role="newpage">XML Schema recommendation</link>).</para>

    <section xml:id="validation-parameters">
      <!-- Main text copied from ../../text-fragments/section-validation-parameters.xml, added c:implementation. -->
      <title>Validation parameters</title>

      <para>The <step/> step has a <port>parameters</port> port of datatype <code>map(xs:QName,&#160;item()*)?</code>. This (optional) map passes
        additional parameters for the validation process to the step, which correspond to Schematron external variables, to parameters that influence
        code generation, or to parameters that influence SVRL to XVRL conversion.</para>
      <itemizedlist>
        <listitem>
          <para>The parameters in this map, their values and semantics are implementation-defined and therefore dependent on the XProc processor
            used.</para>
        </listitem>
        <listitem>
          <para>A special entry with key <code>c:implementation</code> (the <code>c</code> namespace prefix is bound to the standard XProc namespace
              <code>http://www.w3.org/ns/xproc-step</code>) is reserved to select a Schematron implementation the XProc processor supports.The list of
            supported Schematron implementations and their associated values is implementation-defined and therefore dependent on the XProc processor
            used.</para>
        </listitem>
        <listitem>
          <para>A special entry with key <code>c:compile</code> (the <code>c</code> namespace prefix is bound to the standard XProc namespace
              <code>http://www.w3.org/ns/xproc-step</code>) is reserved for parameters for the schema <emphasis>compilation</emphasis> (if
            applicable). The value of this key must be a map itself.</para>
          <para>For instance, if a code-generating implementation such as <link xlink:href="https://github.com/schxslt/schxslt" role="newpage"
              >SchXslt</link> is used, the entries of the <code>c:compile</code> map are passed to the code generator.</para>
        </listitem>
        <listitem>
          <para>If the <option>report-format</option> option is set to <code>xvrl</code> (default): Any entries with keys in the <code>xvrl</code>
            namespace (<code>http://www.xproc.org/ns/xvrl</code>) are passed as parameters to the process that generates the <link
              xlink:href="https://spec.xproc.org/master/head/xvrl/" role="newpage">XVRL</link> report appearing on the <port>report</port> port. All
              <link xlink:href="https://spec.xproc.org/master/head/xvrl/#xvrl-generation" role="newpage">standard XVRL generation parameters</link>
            are supported.</para>
        </listitem>
      </itemizedlist>

    </section>

  </description>

  <!-- ======================================================================= -->

  <detail>
    <para><step/> preserves all document-properties of the document appearing on its <port>source</port> port for the document on its
        <port>result</port> port.</para>
  </detail>

  <detail>
    <para>The document appearing on the <port>report</port> port only has a <property>content-type</property> property. It has no other
      document-properties (also no <property>base-uri</property>).</para>
  </detail>

  <!-- ======================================================================= -->

  <example title="Basic usage (valid source document)" id="basic-valid">

    <para>Assume we have an input document, called <code>input-valid.xml</code>, that looks like this:</para>

    <example-doc href="../../examples/validate-with-schematron/input-valid.xml"/>

    <para>Any <tag>thingref</tag> elements must reference existing <tag>thing</tag> elements by identifier. Here is a simple Schematron schema that
      validates this:</para>

    <example-doc href="../../examples/validate-with-schematron/example.sch"/>

    <para>Performing this validation using the <step/> step (which, for this example, uses the <link xlink:href="https://github.com/schxslt/schxslt"
        role="newpage">SchXslt</link> Schematron processor) returns the following on the <port>report</port> port:</para>

    <xproc-example href="../../examples/validate-with-schematron/validate-with-schematron-01.xpl" show-source="false"/>

    <para>The same example, but now producing a <link xlink:href="https://spec.xproc.org/master/head/xvrl/" role="newpage">XVRL</link> format report,
      is as follows: </para>

    <xproc-example href="../../examples/validate-with-schematron/validate-with-schematron-02.xpl" show-source="false"/>

    <para>The exact format of the reports might differ across implementations. Please experiment before using it.</para>

  </example>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <example title="Basic usage (invalid source document)">

    <para>Using the same Schematron schema as in <example-ref idref="basic-valid"/>, we&#x2019;re now going to validate an
      <emphasis>in</emphasis>valid document (called <code>input-invalid.xml</code>). Since we want to have a look at what comes out of the
        <port>report</port> port, we&#x2019;re going to set the <option>assert-valid</option> option to <code>fasle</code>.</para>

    <example-doc href="../../examples/validate-with-schematron/input-invalid.xml"/>

    <para>Performing this validation using the <step/> step (which, for this example, uses the <link xlink:href="https://github.com/schxslt/schxslt"
        role="newpage">SchXslt</link> Schematron processor) returns the following on the <port>report</port> port:</para>

    <xproc-example href="../../examples/validate-with-schematron/validate-with-schematron-03.xpl" show-source="false"/>

    <para>The same example, but now producing a <link xlink:href="https://spec.xproc.org/master/head/xvrl/" role="newpage">XVRL</link> format report,
      is as follows: </para>

    <xproc-example href="../../examples/validate-with-schematron/validate-with-schematron-04.xpl" show-source="false"/>

    <para>Again, the exact format of the reports might differ across implementations. Please experiment before using it.</para>

    <xproc-example href="../../examples/validate-with-schematron/validate-with-schematron-05.xpl" show-source="false" keep-namespace-prefixes="err">
      <pipeline-header>
        <para role="break-before">Another way of handling validation errors is to have <step/> raise its error <step-error-ref code="XC0054"/> (by
          setting the <option>assert-valid</option> option to <code>true</code>) and catch this in a <tag>p:try</tag>/<tag>p:catch</tag> construction.
          The following pipeline shows you the <tag>c:errors</tag> result, that is available inside the <tag>p:catch</tag>:</para>
      </pipeline-header>
    </xproc-example>
    <para>The exact contents of the <tag>c:errors</tag> element might differ across implementations. Please experiment before using it.</para>


  </example>

  <!-- ======================================================================= -->

  <step-errors>
    <step-error code="XC0151"/>
    <step-error code="XC0054"/>
  </step-errors>

</step>
