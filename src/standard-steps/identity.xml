<?xml version="1.0" encoding="UTF-8"?>
<step name="identity" version-idref="v30" category-idrefs="standard-steps" short-description="Copies the source to the result without modifications"
  required="true" publish="true" href-specification="{$BASELINK-STANDARD-STEPS}#c.identity"
  xsi:schemaLocation="http://www.xtpxlib.nl/ns/xprocref ../../xsd/xprocref.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:xi="http://www.w3.org/2001/XInclude" xmlns="http://www.xtpxlib.nl/ns/xprocref">

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <signature>
    <input port="source" sequence="true" content-types="any" primary="true">
      <description>
        <para>The source document(s)</para>
      </description>
    </input>
    <output port="result" sequence="true" content-types="any" primary="true">
      <description>
        <para>The resulting document(s). These will be exactly the same as what appeared on the <port>source</port> port.</para>
      </description>
    </output>
  </signature>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <summary>
    <para>The <step>p:identity</step> step makes a verbatim copy of what appears on its <port>source</port> port to its <port>result</port>
      port.</para>
  </summary>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <description>
    <para>The <step/> step does… nothing. It makes a verbatim copy of all documents appearing on its <port>source</port> port to its
        <port>result</port> port. Although it doesn&#x2019;t do anything, it is actually extremely useful and virtually indispensable. The examples
      below show some use cases.</para>
  </description>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <detail>
    <xi:include href="../text-fragments/document-properties-preserved.xml"/>
  </detail>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <example title="Create a fixed document">
    <para>There are many situations where you need to create a fixed document in your pipeline. For instance:</para>
    <itemizedlist>
      <listitem>
        <para>On an error catch you want some <tag>error …</tag> element as result:</para>
        <example-doc href="examples/identity/identity-01.xml"/>
      </listitem>
      <listitem>
        <para>Some pipelines write their main results to disk and the actual output of the pipeline doesn&#x2019;t matter. In these cases is often
          useful to produce some kind of report document with relevant information (for instance, when it happened, where the results are,
          etc.):</para>
        <example-doc href="examples/identity/identity-02.xml"/>
      </listitem>
    </itemizedlist>
  </example>

  <example title="Create an explicit anchor points in your pipeline">
    <para>Because the <step/> step does&#x2019;t do anything, it can be used to create &#x201c;anchor points&#x201d; in your pipeline. Assume you have
      a complicated pipeline where some version of the document flowing through must be used somewhere else. The <step/> step can be used to mark such
      a location explicitly. In the following example an anchor point called <code>raw-version</code> is created and, later on, referred to:</para>
    <example-doc href="examples/identity/identity-03.xml"/>
    <para>You could also achieve this by using the <code>name="raw-version"</code> attribute on the last step of the first batch of computations.
      However, by using an explicit <step/> step it stands out in the code. Also, when the computations change (and they will), you don’t have to
      remember to keep the <code>name="raw-version"</code> attribute on the <emphasis>last</emphasis> one always.</para>
  </example>

  <example title="Produce a processing message">
    <para>XProc has a <code>message</code> attribute (or <code>p:message</code> on steps not in the XProc namespace) that results in a message when
      the pipeline runs. Where this message appears depends on how the pipeline is run. Sometimes you want to explicitly produce messages when some
      point in your pipeline is reached. Since <step/> does&#x2019;t do anything, it is ideal for this:</para>
    <example-doc href="examples/identity/identity-04.xml"/>
  </example>

</step>
