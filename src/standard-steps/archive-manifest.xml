<?xml version="1.0" encoding="UTF-8"?>
<step name="archive-manifest" version-idref="v30" category-idrefs="standard-steps archive"
  short-description="Create an XML manifest document describing the contents of an archive file" required="true" publish="false"
  href-specification="{$BASELINK-STANDARD-STEPS}#c.archive-manifest" xsi:schemaLocation="http://www.xtpxlib.nl/ns/xprocref ../../xsd/xprocref.xsd"
  xmlns:xdoc="http://www.xtpxlib.nl/ns/xdoc" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="http://www.xtpxlib.nl/ns/xprocref" xmlns:xlink="http://www.w3.org/1999/xlink">

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <signature>
    <input port="source" primary="true" content-types="any" sequence="false">
      <description>
        <para>The archive file to create the manifest for.</para>
      </description>
    </input>
    <output port="result" primary="true" content-types="application/xml" sequence="false">
      <description>
        <para>The created XML manifest document. See <xref linkend="archive-manifest-format"/>.</para>
      </description>
    </output>

    <option name="format" as="xs:QName?" required="false" select="()">
      <description>
        <para>The format of the archive file on the <port>source</port> port:</para>
        <itemizedlist>
          <listitem>
            <para>If its value is <code>zip</code>, the <step/> step expects a ZIP archive on the <port>source</port> port.</para>
          </listitem>
          <listitem>
            <para>If absent or the empty sequence, the <step/> step tries to guess the archive file format. The only format that this step is required
              to recognize and handle is ZIP.</para>
          </listitem>
          <listitem>
            <para>Whether any other archive formats can be handled and what their names (values for this option) are depends on the XProc processor
              used.</para>
          </listitem>
        </itemizedlist>
      </description>
    </option>
    <option name="parameters" as="map(xs:QName, item()*)?" required="false" select="()">
      <description>
        <para>Parameters used to control the XML manifest document generation. The XProc specification does not define any parameters for this option.
          A specific XProc processor might define its own.</para>
      </description>
    </option>
    <option name="relative-to" as="xs:anyURI?" required="false" select="()">
      <description>
        <para>[EDIT] option relative-to TBD</para>
      </description>
    </option>
    <option name="override-content-types" as="array(array(xs:string))?" required="false" select="()">
      <description>
        <para>Use this to override the content-type determination (see <xref linkend="override-content-type"/>).</para>
      </description>
    </option>
  </signature>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <summary>
    <para>The <step/> step creates an XML manifest document describing the contents of the archive appearing on its <port>source</port> port.</para>
  </summary>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <description>
    <para>The <step/> step takes an archive file on its <port>source</port> port, for instance a ZIP file, and returns on its <port>result</port> port
      an XML document that describes the contents of the archive: the <emphasis>archive&#160;manifest</emphasis>.</para>
    <para>Archives come in many formats. The only format the <step/> step is required to handle is ZIP. However, depending on the XProc processor
      used, other formats may also be processed.</para>
    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <section xml:id="archive-manifest-format">
      <!-- BREAK OUT IN SEP DOC?!? FOR INCLUSION IN OTHER ARCHIVE STEPS -->
      <title>The XML archive manifest document format</title>
      <para>The root element of an XML manifest document is <tag>c:archive</tag> (the <code>c</code> prefix here is bound to the
          <code>http://www.w3.org/ns/xproc-step</code> namespace):</para>
      <xdoc:transform href="$xdoc/xml-description.xpl">
        <xi:include href="element-descriptions/c-archive.description.xml"/>
      </xdoc:transform>
      <para>A <tag>c:entry</tag> element describes a single entry (a file) in the archive:</para>
      <xdoc:transform href="$xdoc/xml-description.xpl">
        <xi:include href="element-descriptions/c-archive-entry.description.xml"/>
      </xdoc:transform>
    </section>
    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <section xml:id="override-content-type">
      <title>Overriding content types</title>
      <para>The <option>override-content-types</option> option can be used to partially override the content-type determination mechanism. If present,
        it must be an array of arrays, where the inner arrays consist of exactly two strings: </para>
      <itemizedlist>
        <listitem>
          <para>The first member in an inner array must be a regular expression as specified in <link
              xlink:href="https://www.w3.org/TR/xpath-functions-31/" role="newpage" xmlns:xlink="http://www.w3.org/1999/xlink">the XPath 3.1
              functions</link> , section 7.61 “<literal>Regular Expression Syntax</literal>”. <emphasis role="bold">[ERROR <step-error-ref
                code="XC0147"/>]</emphasis>
          </para>
        </listitem>
        <listitem>
          <para>The second member in an inner array must be a valid a MIME content-type. <emphasis role="bold">[ERROR <step-error-ref code="XD0079"
              />]</emphasis>
          </para>
        </listitem>
      </itemizedlist>
      <para>
        <emphasis role="bold">[ERROR <step-error-ref code="XC0146"/>]</emphasis>
      </para>
      <para>Determining an archive entry's content-type is as follows:</para>
      <itemizedlist>
        <listitem>
          <para>The XPath regular expressions (the first members of the inner arrays) will be matched against the path of the entry
              <emphasis>in</emphasis> the archive. This will be done in the order of appearance in the outer array (so order is significant). The
            matching is done unanchored: it is a match if the regular expression matches part of the entry's path. Informally: matching behaves like
            applying the XPath <code>matches#2</code> function, like in <code>matches($path-in-archive, $regular-expression)</code>.</para>
          <note>
            <para>Depending on how archives are constructed, the path of an entry in an archive can be with or without a leading slash. Usually it
              will be without. For archives constructed by <tag>p:archive</tag> no leading slash will be present.</para>
          </note>
        </listitem>
        <listitem>
          <para>If a match is found, the content-type (the second member of the inner array for which the match was found) is used as the entry's
            content-type.</para>
        </listitem>
        <listitem>
          <para>If no match was found for all inner arrays, the normal (implementation-defined) mechanism for determining the content-type is used.
          </para>
        </listitem>
      </itemizedlist>
      <para>For example: setting the <option>override-content-types</option> option to <code>[ ['.rels$', 'application/xml'], ['^special/',
          'application/octet-stream'] ]</code> means that all files ending with <code>.rels</code> will get the content-type
          <code>application/xml</code>. All files in the archive's <code>special</code> directory (including sub-directories) will get the
        content-type <code>application/octet-stream</code>.</para>
    </section>
    <bridgehead>Document properties</bridgehead>
    <para feature="archive-manifest-preserves-none">No document properties are preserved. The manifest has no <property>base-uri</property>.</para>
  </description>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <detail>
    <para>The only format this step is required to handle is ZIP. Its definition can be found <link
        xlink:href="https://pkware.cachefly.net/webdocs/casestudies/APPNOTE.TXT">here</link>.</para>
  </detail>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <example title="Basic usage">
    <para>Assume we have a simple ZIP file with two entries:</para>
    <itemizedlist>
      <listitem>
        <para>An XML file in the root called <code>reference.xml</code></para>
      </listitem>
      <listitem>
        <para>An image in an <code>images/</code> sub-directory called <code>logo.png</code>.</para>
      </listitem>
    </itemizedlist>
    <xproc-example href="examples/archive-manifest/archive-manifest-01.xpl" show-source="false">
      <pipeline-header>
        <para>The following pipeline creates an archive manifest for this ZIP file:</para>
      </pipeline-header>
      <result-header>
        <para>Archive manifest:</para>
      </result-header>
    </xproc-example>
    <para>As you can see, the XProc processor I&#x2019;m using to process this example (Morgana) adds a few attributes to the <tag>c:entry</tag>
      elements: <code>size</code>, <code>compressed-size</code> and <code>time</code>.</para>
  </example>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <step-errors>
    <step-error code="XC0085">
      <!--<description>
        <para>It is a dynamic error if the format of the archive does not match the specified format, cannot be understood, determined and/or
          processed.</para>
      </description>-->
    </step-error>
    <step-error code="XC0079">
      <!--<description>
        <para>It is a dynamic error if the map <option>parameters</option> contains an entry whose key is defined by the implementation and whose
          value is not valid for that key.</para>
      </description>-->
    </step-error>
    <step-error code="XD0064">
      <!--<description>
        <para>It is a dynamic error if the base URI is not both absolute and valid according to <link
            xlink:href="https://www.rfc-editor.org/info/rfc3986" role="newpage" xmlns:xlink="http://www.w3.org/1999/xlink">RFC 3986</link> .</para>
      </description>-->
    </step-error>
    <step-error code="XC0120">
      <!--<description>
        <para>It is a dynamic error if the <option>relative-to</option> option is not present and the document on the <port>source</port> port does
          not have a base URI.</para>
      </description>-->
    </step-error>
    <step-error code="XC0147">
      <!--<description>
        <para>It is a dynamic error if the specified value is not a valid XPath regular expression.</para>
      </description>-->
    </step-error>
    <step-error code="XD0079">
      <!--<description>
        <para>It is a dynamic error if a supplied content-type is not a valid media type of the form “<literal>
            <replaceable>type</replaceable>/<replaceable>subtype</replaceable>+<replaceable>ext</replaceable>
          </literal>” or “<literal>
            <replaceable>type</replaceable>/<replaceable>subtype</replaceable>
          </literal>”.</para>
      </description>-->
    </step-error>
    <step-error code="XC0146">
      <!--<description>
        <para>It is a dynamic error if the specified value for the <option>override-content-types</option> option is not an array of arrays, where the
          inner arrays have exactly two members of type <code>xs:string</code>.</para>
      </description>-->
    </step-error>
  </step-errors>
</step>
