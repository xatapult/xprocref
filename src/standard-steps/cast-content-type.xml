<?xml version="1.0" encoding="UTF-8"?>
<step name="cast-content-type"
      version-idref="v30"
      category-idrefs="standard-steps"
      short-description="[EDIT] cast-content-type short description"
      required="true"
      publish="false"
      xsi:schemaLocation="http://www.xtpxlib.nl/ns/xprocref ../../../xsd/xprocref.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns="http://www.xtpxlib.nl/ns/xprocref">
   <specification-link href="{$BASELINK-STANDARD-STEPS}#c.cast-content-type"/>
   <signature>
      <input port="source"
             content-types="any"
             primary="true"
             sequence="true">
         <description>
            <para>[EDIT] input source</para>
         </description>
      </input>
      <output port="result"
              content-types="any"
              primary="true"
              sequence="true">
         <description>
            <para>[EDIT] output result</para>
         </description>
      </output>
      <option name="content-type"
              required="true"
              as="xs:string">
         <description>
            <para>[EDIT] option content-type</para>
         </description>
      </option>
      <option name="parameters"
              as="map(xs:QName,item()*)?"
              required="false">
         <description>
            <para>[EDIT] option parameters</para>
         </description>
      </option>
   </signature>
   <summary>
      <para>[EDIT]</para>
      <para>The <tag>p:cast-content-type</tag> step creates a new document by changing the media type of its input. If the value of the <option>content-type</option> option and the current media type of the document on <port>source</port> port are the same, this document will appear unchanged on <port>result</port> port.</para>
   </summary>
   <description>
      <para>[EDIT]</para>
      <para>The input document is transformed from one media type to another. <emphasis role="bold">[ERROR <step-error-ref code="D0079"/>]</emphasis>
         <emphasis role="bold">[ERROR <step-error-ref code="C0071"/>]</emphasis>
      </para>
      <para>The <option>parameters</option> can be used to supply parameters to control casting. The semantics of the keys and the allowed values for these keys are implementation-defined. <emphasis role="bold">[ERROR <step-error-ref code="C0079"/>]</emphasis>
      </para>
      <sect2 xml:id="casting-from-xml">
         <title>Casting from an XML media type</title>
         <itemizedlist>
            <listitem>
               <para>Casting from one XML media type to another simply changes the “<literal>content-type</literal>” document property. </para>
            </listitem>
            <listitem>
               <para>Casting from an XML media type to an HTML media type changes the “<literal>content-type</literal>” document property and removes any serialization property. </para>
            </listitem>
            <listitem>
               <para>Casting from an XML media type to a JSON media type converts the XML into JSON. The precise nature of the conversion from XML to JSON is implementation-defined. If the input document is an XML representation of JSON as defined in <link xlink:href="https://www.w3.org/TR/xpath-functions-31/"
                        role="newpage"
                        xmlns:xlink="http://www.w3.org/1999/xlink">the XPath 3.1 functions</link> , implementations must produce the same result as <literal>fn:parse-json(fn:xml-to-json())</literal> by default. If the input document has a <tag>c:param-set</tag> document element, an instance of <literal>map(xs:QName, xs:string)</literal> must be returned that represents the document's <tag>c:param</tag> elements. The serialization property is removed. </para>
            </listitem>
            <listitem>
               <para>Casting from an XML media type to a text media type serializes the XML document by calling <function>fn:serialize($doc, $param)</function> where <literal>$doc</literal> is the document on the <port>source</port> port and <literal>$param</literal> is the serialization property of this document. The resulting string is wrapped by a document node and returned on the <port>result</port> port. The serialization property is removed.</para>
            </listitem>
            <listitem>
               <para>Casting from an XML media type to any other media type must support the case where the input document is a <tag>c:data</tag> document. The resulting document will have the specified media type and a representation that is the content of the <tag>c:data</tag> element after decoding the base64 encoded content The serialization property is removed.</para>
               <para>
                  <emphasis role="bold">[ERROR <step-error-ref code="C0072"/>]</emphasis>
               </para>
               <para>
                  <emphasis role="bold">[ERROR <step-error-ref code="C0073"/>]</emphasis>
               </para>
               <para>
                  <emphasis role="bold">[ERROR <step-error-ref code="C0074"/>]</emphasis>
               </para>
               <para>Casting from an XML media type to any other media type when the input document is not a <tag>c:data</tag> document is implementation-defined.</para>
            </listitem>
         </itemizedlist>
      </sect2>
      <sect2 xml:id="casting-from-html">
         <title>Casting from an HTML media type</title>
         <itemizedlist>
            <listitem>
               <para>Casting from an HTML media type to an XML media type changes “<literal>content-type</literal>” document property and removes any serialization property. </para>
            </listitem>
            <listitem>
               <para>Casting from an HTML media type to another HTML media type changes “<literal>content-type</literal>” document property.</para>
            </listitem>
            <listitem>
               <para>Casting from an HTML media type to a JSON media type is implementation-defined.</para>
            </listitem>
            <listitem>
               <para>Casting an an HTML media type to a text media type serializes the HTML document by calling <function>fn:serialize($doc, $param)</function> where <literal>$doc</literal> is the document on the <port>source</port> port and <literal>$param</literal> is the serialization property of this document. The resulting string is wrapped by a document node and returned on the <port>result</port> port. The serialization property is removed.</para>
            </listitem>
            <listitem>
               <para>Casting from an HTML media type to any other media type is implementation-defined.</para>
            </listitem>
         </itemizedlist>
      </sect2>
      <sect2 xml:id="casting-from-json">
         <title>Casting from a JSON media type</title>
         <itemizedlist>
            <listitem>
               <para>Casting from a JSON media type to an XML media type converts the JSON into XML. An implementation must support the format specified in section “XML Representation of JSON” of <link xlink:href="https://www.w3.org/TR/xpath-functions-31/"
                        role="newpage"
                        xmlns:xlink="http://www.w3.org/1999/xlink">the XPath 3.1 functions</link> as default for the resulting XML. It is implementation-defined whether other result formats are supported. The serialization property is removed.</para>
            </listitem>
            <listitem>
               <para>Casting from a JSON media type to an HTML media type is implementation-defined.</para>
            </listitem>
            <listitem>
               <para>Casting from a JSON media type to another JSON media type changes “<literal>content-type</literal>” document property.</para>
            </listitem>
            <listitem>
               <para>Casting from a JSON media type to a text media type serializes the JSON document by calling <function>fn:serialize($doc, $param)</function> where <literal>$doc</literal> is the document on the <port>source</port> port and <literal>$param</literal> is the serialization property of this document. The resulting string is wrapped by a document node and returned on the <port>result</port> port. The serialization property is removed.</para>
            </listitem>
            <listitem>
               <para>Casting from a JSON media type to any other media type is implementation-defined.</para>
            </listitem>
         </itemizedlist>
      </sect2>
      <sect2 xml:id="casting-from-text">
         <title>Casting from a text media type</title>
         <itemizedlist>
            <listitem>
               <para>Casting from a text media type to an XML media type parses the text value of the document on <port>source</port> port by calling <function>fn:parse-xml</function>. <emphasis role="bold">[ERROR <step-error-ref code="D0049"/>]</emphasis>. The serialization property is removed.</para>
            </listitem>
            <listitem>
               <para>Casting from a text media type to an HTML media type parses the text value of the document on <port>source</port> port into an XPath data model document that contains a tree of elements, attributes, and other nodes. The precise way in which text documents are parsed into the XPath data model is implementation-defined. <emphasis role="bold">[ERROR <step-error-ref code="D0060"/>]</emphasis>. The serialization property is removed.</para>
            </listitem>
            <listitem>
               <para>Casting from a text media type to a JSON media type parses the text value of the document on <port>source</port> port by calling <function>fn:parse-json($doc, $par)</function> where <literal>$doc</literal> is the text document and <literal>$par</literal> is the <option>parameter</option> option. <emphasis role="bold">[ERROR <step-error-ref code="D0057"/>]</emphasis>
                  <emphasis role="bold">[ERROR <step-error-ref code="D0058"/>]</emphasis>
                  <emphasis role="bold">[ERROR <step-error-ref code="D0059"/>]</emphasis> The serialization property is removed. </para>
            </listitem>
            <listitem>
               <para>Casting from a text media type to another text media type changes “<literal>content-type</literal>” document property.</para>
            </listitem>
            <listitem>
               <para>Casting from a text media type to any other media type is implementation-defined.</para>
            </listitem>
         </itemizedlist>
      </sect2>
      <sect2 xml:id="casting-from-other">
         <title>Casting from any other media type</title>
         <itemizedlist>
            <listitem xml:id="c.data">
               <para>Casting from a non-XML media type to an XML media type produces an XML document with a <tag>c:data</tag> document element. The original media type will be preserved in the <tag class="attribute">content-type</tag> attribute on the <tag>c:data</tag> element.</para>
               <para>
                  <emphasis role="bold">[RNG Pattern VocabData]</emphasis>
               </para>
               <para>The content of the <tag>c:data</tag> element is the base64 encoded representation of the non-XML content. The serialization property is removed.</para>
            </listitem>
            <listitem>
               <para>Casting from any other media type to a HTML media type, a JSON media type or a text document is implementation-defined.</para>
            </listitem>
            <listitem>
               <para>Casting from any other media type to any other media type is implementation-defined.</para>
            </listitem>
         </itemizedlist>
      </sect2>
      <bridgehead>Document properties</bridgehead>
      <para feature="cast-content-type-preserves-some">All document properties are preserved except the <code>content-type</code> property which is updated accordingly and the <code>serialization</code> property which is removed by some casting methods.</para>
   </description>
   <step-errors>
      <step-error code="D0079">
         <description>
            <para>It is a dynamic error if a supplied content-type is not a valid media type of the form “<literal>
                  <replaceable>type</replaceable>/<replaceable>subtype</replaceable>+<replaceable>ext</replaceable>
               </literal>” or “<literal>
                  <replaceable>type</replaceable>/<replaceable>subtype</replaceable>
               </literal>”.</para>
         </description>
      </step-error>
      <step-error code="C0071">
         <description>
            <para>It is a dynamic error if the <tag>p:cast-content-type</tag> step cannot perform the requested cast.</para>
         </description>
      </step-error>
      <step-error code="C0079">
         <description>
            <para>It is a dynamic error if the map <option>parameters</option> contains an entry whose key is defined by the implementation and whose value is not valid for that key.</para>
         </description>
      </step-error>
      <step-error code="C0072">
         <description>
            <para>It is a dynamic error if the <tag>c:data</tag> contains content is not a valid base64 string.</para>
         </description>
      </step-error>
      <step-error code="C0073">
         <description>
            <para>It is a dynamic error if the <tag>c:data</tag> element does not have a <tag class="attribute">content-type</tag> attribute.</para>
         </description>
      </step-error>
      <step-error code="C0074">
         <description>
            <para>It is a dynamic error if the <option>content-type</option> is supplied and is not the same as the <tag class="attribute">content-type</tag> specified on the <tag>c:data</tag> element.</para>
         </description>
      </step-error>
      <step-error code="D0049">
         <description>
            <para>It is a dynamic error if the text value is not a well-formed XML document</para>
         </description>
      </step-error>
      <step-error code="D0060">
         <description>
            <para>It is a dynamic error if the text document can not be converted into the XPath data model</para>
         </description>
      </step-error>
      <step-error code="D0057">
         <description>
            <para>It is a dynamic error if the text document does not conform to the JSON grammar, unless the parameter liberal is true and the processor chooses to accept the deviation.</para>
         </description>
      </step-error>
      <step-error code="D0058">
         <description>
            <para>It is a dynamic error if the parameter duplicates is reject and the text document contains a JSON object with duplicate keys.</para>
         </description>
      </step-error>
      <step-error code="D0059">
         <description>
            <para>It is a dynamic error if the parameter map contains an entry whose key is defined in the specification of <function>fn:parse-json</function> and whose value is not valid for that key, or if it contains an entry with the key fallback when the parameter <literal>escape</literal> with <literal>true()</literal> is also present.</para>
         </description>
      </step-error>
   </step-errors>
</step>